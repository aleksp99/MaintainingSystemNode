#Область ПрограммныйИнтерфейс

#Область ПК

Функция ДисковыеНакопители() Экспорт
	
	DiskDrive = Инфраструктура.ВыполнитьMWI("SELECT * FROM Win32_DiskDrive", Истина);
	DiskDrive.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого Элемент Из DiskDrive Цикл
		Элемент.Ключ = СтрШаблон("\\%1\root\cimv2:%2.DeviceID=""%3""", Элемент.SystemName, Элемент.CreationClassName,
			СтрЗаменить(Элемент.DeviceID, "\", "\\"));
	КонецЦикла;
	DiskDriveToDiskPartition = Новый ТаблицаЗначений;
	DiskDriveToDiskPartition.Колонки.Добавить("Antecedent", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	DiskDriveToDiskPartition.Колонки.Добавить("Dependent", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого ЗначениеWMI Из Инфраструктура.ВыполнитьMWI("SELECT * FROM Win32_DiskDriveToDiskPartition") Цикл
		НоваяСтрока = DiskDriveToDiskPartition.Добавить();
		НоваяСтрока.Antecedent = ЗначениеWMI.Properties_.Item("Antecedent").Value;
		НоваяСтрока.Dependent = ЗначениеWMI.Properties_.Item("Dependent").Value;
	КонецЦикла;
	DiskPartition = Инфраструктура.ВыполнитьMWI("SELECT * FROM Win32_DiskPartition", Истина);
	DiskPartition.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого Элемент Из DiskPartition Цикл
		Элемент.Ключ = СтрШаблон("\\%1\root\cimv2:%2.DeviceID=""%3""", Элемент.SystemName, Элемент.CreationClassName,
			Элемент.DeviceID);
	КонецЦикла;
	LogicalDisk = Инфраструктура.ВыполнитьMWI("SELECT * FROM Win32_LogicalDisk WHERE DriveType = 3", Истина);
	LogicalDisk.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого Элемент Из LogicalDisk Цикл
		Элемент.Ключ = СтрШаблон("\\%1\root\cimv2:%2.DeviceID=""%3""", Элемент.SystemName, Элемент.CreationClassName,
			Элемент.DeviceID);
	КонецЦикла;
	LogicalDiskToPartition = Новый ТаблицаЗначений;
	LogicalDiskToPartition.Колонки.Добавить("Antecedent", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	LogicalDiskToPartition.Колонки.Добавить("Dependent", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого ЗначениеWMI Из Инфраструктура.ВыполнитьMWI("SELECT * FROM Win32_LogicalDiskToPartition") Цикл
		НоваяСтрока = LogicalDiskToPartition.Добавить();
		НоваяСтрока.Antecedent = ЗначениеWMI.Properties_.Item("Antecedent").Value;
		НоваяСтрока.Dependent = ЗначениеWMI.Properties_.Item("Dependent").Value;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ_DiskDrive ИЗ &DiskDrive КАК ТЗ;
				   |ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ_DiskDriveToDiskPartition ИЗ &DiskDriveToDiskPartition КАК ТЗ;
				   |ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ_DiskPartition ИЗ &DiskPartition КАК ТЗ;
				   |ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ_LogicalDisk ИЗ &LogicalDisk КАК ТЗ;
				   |ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ_LogicalDiskToPartition ИЗ &LogicalDiskToPartition КАК ТЗ
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЕСТЬNULL(ТЗ_LogicalDisk.VolumeName, ТЗ_DiskPartition.DeviceID) КАК Наименование,
				   |	ЕСТЬNULL(ТЗ_DiskDrive.Model, """") КАК Модель,
				   |	ЕСТЬNULL(ТЗ_DiskDrive.FirmwareRevision, """") КАК ВерсияПрошивки,
				   |	ЕСТЬNULL(ТЗ_DiskDrive.InterfaceType, """") КАК ТипИнтерфейса,
				   |	ЕСТЬNULL(ТЗ_DiskDrive.Size, 0) КАК РазмерДиска,
				   |	ЕСТЬNULL(ТЗ_DiskPartition.Description, """") КАК Раздел,
				   |	ЕСТЬNULL(ТЗ_DiskPartition.DeviceID, """") КАК ИдентификаторРаздела,
				   |	ЕСТЬNULL(ТЗ_DiskPartition.Size, 0) КАК РазмерРаздела,
				   |	ЕСТЬNULL(ТЗ_LogicalDisk.FreeSpace, 0) КАК РазмерСвободно,
				   |	ЕСТЬNULL(ПОДСТРОКА(ТЗ_LogicalDisk.DeviceID, 1, 1), """") КАК Буква,
				   |	ЕСТЬNULL(ТЗ_LogicalDisk.FileSystem, """") КАК ФайловаяСистема
				   |ИЗ
				   |	ТЗ_DiskDrive КАК ТЗ_DiskDrive
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_DiskDriveToDiskPartition КАК ТЗ_DiskDriveToDiskPartition
				   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_DiskPartition КАК ТЗ_DiskPartition
				   |				ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_LogicalDiskToPartition КАК ТЗ_LogicalDiskToPartition
				   |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_LogicalDisk КАК ТЗ_LogicalDisk
				   |					ПО ТЗ_LogicalDiskToPartition.Dependent = ТЗ_LogicalDisk.Ключ
				   |				ПО ТЗ_DiskPartition.Ключ = ТЗ_LogicalDiskToPartition.Antecedent
				   |			ПО ТЗ_DiskDriveToDiskPartition.Dependent = ТЗ_DiskPartition.Ключ
				   |		ПО ТЗ_DiskDrive.Ключ = ТЗ_DiskDriveToDiskPartition.Antecedent";
	Запрос.УстановитьПараметр("DiskDrive", DiskDrive);
	Запрос.УстановитьПараметр("DiskDriveToDiskPartition", DiskDriveToDiskPartition);
	Запрос.УстановитьПараметр("DiskPartition", DiskPartition);
	Запрос.УстановитьПараметр("LogicalDisk", LogicalDisk);
	Запрос.УстановитьПараметр("LogicalDiskToPartition", LogicalDiskToPartition);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ТЗ = ПустаяТаблицаДисковыеНакопители();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТЗ;
	КонецЕсли;
	
	ИмяКомпьютера = ИмяКомпьютера();
	КлючНавигации_Компьютер = Инфраструктура.КлючНавигации(ИмяКомпьютера);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, НоваяСтрока.ИдентификаторРаздела);
		НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
		НоваяСтрока.Владелец_КлючНавигации = КлючНавигации_Компьютер;
		
		ЗаполнитьКлючДанных(НоваяСтрока);
		
	КонецЦикла;
		
	Возврат Новый Структура("Справочник_ДисковыеНакопители", ТЗ);

КонецФункции

#КонецОбласти

#Область SQL

Функция БазыДанных(Параметры) Экспорт
	
	ADO = Инфраструктура.СоединениеADO(Параметры);
	Если ADO.ОшибкаПодключенияКомпоненты Тогда
		 ВызватьИсключение ADO.ПодробноеОписаниеОшибки; 
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		ListDB = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапросаListDB());
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Инфраструктура.ОтключитьADO(ADO.Соединение);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если ListDB = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БазыДанных = ПустаяТаблицаБазыДанных();
	КонфигурацииИБ = ПустаяТаблицаКонфигурацииИБ();
	РелизыПоставщика = ПустаяТаблицаРелизыПоставщика();
	УстановленныеРелизыПоставщика = ПустаяТаблицаУстановленныеРелизыПоставщика();
	ПользователиБД = ПустаяТаблицаПользователиБД();
	
	ИмяКомпьютера = ИмяКомпьютера();
	КлючНавигации_Владелец = Инфраструктура.КлючНавигации(ИмяКомпьютера, Параметры.ТипСУБД, Параметры.Сервер);
	CостоянияБазыДанных = Метаданные.Перечисления.CостоянияБазыДанных.ЗначенияПеречисления;
	МоделиВосстановленияБазыДанных = Метаданные.Перечисления.МоделиВосстановленияБазыДанных.ЗначенияПеречисления;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ReadFile = ?(ПодключитьВнешнююКомпоненту("ОбщийМакет.ReadFile", "def"), Новый("AddIn.def.ReadFileOneC"), Неопределено);

	Для Каждого Элемент Из ListDB[ListDB.Количество() - 1] Цикл
		
		НоваяСтрока = БазыДанных.Добавить();
		НоваяСтрока.Наименование = Элемент.name;
		НоваяСтрока.ИдентификационныйНомер = Элемент.database_id;
		НоваяСтрока.ДатаСоздания = Элемент.create_date;
		НоваяСтрока.Cостояние = ПредопределенноеЗначение("Перечисление.CостоянияБазыДанных."
			+ CостоянияБазыДанных.Получить(?(Элемент.state = 10, 8, Элемент.state + 1)));
		НоваяСтрока.МодельВосстановления = ПредопределенноеЗначение("Перечисление.МоделиВосстановленияБазыДанных."
			+ МоделиВосстановленияБазыДанных.Получить(Элемент.recovery_model - 1));
		НоваяСтрока.ЭтоКонфигурация1С = Элемент.is1C;
				
		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Параметры.ТипСУБД, Параметры.Сервер,
			Элемент.name); 
		НоваяСтрока.Владелец_Тип = "Справочник.СервераБазДанных";
		НоваяСтрока.Владелец_КлючНавигации = КлючНавигации_Владелец;
		
		// 1С
		Если Не Элемент.is1C Тогда
			Перейти ~Пропустить1C;
		КонецЕсли;
		
		СвойстваБазы1С = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапросаСвойстваБазы1С(Элемент.name))[1][0];		
		НоваяСтрока.ДатаИзмененияОснКонф = Инфраструктура.SQLДата(СвойстваБазы1С.modifiedConfigSave);
		НоваяСтрока.ДатаИзмененияКонфБД = Инфраструктура.SQLДата(СвойстваБазы1С.modifiedConfig);
		
		Если Не СвойстваБазы1С.dynamicallyUpdated = Null Тогда 
			Инфраструктура.SaveBinaryData(СвойстваБазы1С.dynamicallyUpdated, ИмяВременногоФайла);
			ReadFile.Открыть(ИмяВременногоФайла, 2);
			Ключи = Новый Массив;
			Количество = ЗначениеИзСтрокиВнутр(ReadFile.Значение("1", Истина));
			Для Номер = 1 По Количество Цикл 
				Ключи.Добавить("'versions_dynupdate_" + ReadFile.Значение(Строка(1 + Номер)) + "'");
			КонецЦикла;
			ДинамическиеОбъявления = Новый Массив;
			Для Каждого Строка Из Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, "SELECT RIGHT(FileName, 36) AS FileName, Modified FROM [" + Элемент.name + "].dbo.Config WHERE FileName IN (" + СтрСоединить(Ключи, ",") + ") ORDER BY Modified") Цикл 
				ДинамическиеОбъявления.Добавить(Строка.FileName + "|" + Формат(Инфраструктура.SQLДата(Строка.Modified), "ДФ=yyyyMMddHHmmss"));
			КонецЦикла;
			НоваяСтрока.ДинамическиеОбъявления = СтрСоединить(ДинамическиеОбъявления, ";");
		КонецЕсли;
		
		Попытка

		#Область Свойства
			
			Если СвойстваБазы1С.fRoot = NULL Или ReadFile = Неопределено Тогда 
				Перейти ~Пропустить1C;
			КонецЕсли;
			Инфраструктура.SaveBinaryData(СвойстваБазы1С.fRoot, ИмяВременногоФайла);
			ReadFile.Открыть(ИмяВременногоФайла, 1);
			УИД = ЗначениеИзСтрокиВнутр(ReadFile.Найти("(?i:([a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}))"))[0];
						
			Инфраструктура.SaveBinaryData(Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, "SELECT BinaryData FROM [" + Элемент.name + "].dbo.Config WHERE FileName = '" + УИД + "'",, Ложь).GetRows().GetValue(0, 0), ИмяВременногоФайла);
			ReadFile.Открыть(ИмяВременногоФайла, 1);
			НоваяСтрока.Конфигурация_Тип = "Справочник.КонфигурацииИБ";
			Версия = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,15", Истина));
			НоваяСтрока.Конфигурация_КлючНавигации = Инфраструктура.КлючНавигации(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,2", Истина)),
																					?(ПустаяСтрока(Версия), 0, Число(СтрРазделить(Версия, ".")[0])));
			Если КонфигурацииИБ.Найти(НоваяСтрока.Конфигурация_КлючНавигации, "КлючНавигации") = Неопределено Тогда
				НоваяСтрока_Cf = КонфигурацииИБ.Добавить();
				НоваяСтрока_Cf.КлючНавигации = НоваяСтрока.Конфигурация_КлючНавигации;
				НоваяСтрока_Cf.Идентификатор = ЗначениеИзСтрокиВнутр(ReadFile.Значение("1,0", Истина));
				НоваяСтрока_Cf.Имя = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,2", Истина));
				НоваяСтрока_Cf.Наименование = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,3,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,3,2", Истина)), "");
				Если ПустаяСтрока(НоваяСтрока_Cf.Наименование) Тогда
					НоваяСтрока_Cf.Наименование = НоваяСтрока_Cf.Имя;
				КонецЕсли;
				НоваяСтрока_Cf.Комментарий = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,4", Истина));
				Если ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,21", Истина)) = 0 Тогда
					НоваяСтрока_Cf.ОсновнойРежимЗапуска = "Обычное приложение";
				ИначеЕсли ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,21", Истина)) = 1 Тогда
					НоваяСтрока_Cf.ОсновнойРежимЗапуска = "Управляемое приложение";
				Иначе
					НоваяСтрока_Cf.ОсновнойРежимЗапуска = "";
				КонецЕсли;
				НоваяСтрока_Cf.ПодробнаяИнформация = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,4,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,4,2", Истина)), "");
				НоваяСтрока_Cf.КраткаяИнформация = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,5,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,5,2", Истина)), "");
				НоваяСтрока_Cf.АвторскиеПрава = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,6,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,6,2", Истина)), "");
				НоваяСтрока_Cf.АдресПоставщика = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,7,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,7,2", Истина)), "");
				НоваяСтрока_Cf.АдресКонфигурации = ?(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,8,0", Истина)), ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,8,2", Истина)), "");
				НоваяСтрока_Cf.Поставщик = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,14", Истина));
				НоваяСтрока_Cf.Редакция = ?(ПустаяСтрока(Версия), 0,
													Число(СтрРазделить(Версия, ".")[0]));
				НоваяСтрока_Cf.АдресОбновлений = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,16", Истина));
				ЗаполнитьКлючДанных(НоваяСтрока_Cf);
			КонецЕсли;
			
			КлючНавигации = Инфраструктура.КлючНавигации(ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,1,1,2", Истина)),
																					?(ПустаяСтрока(Версия), 0, Число(СтрРазделить(Версия, ".")[0])),
																					Версия);
			Если РелизыПоставщика.Найти(КлючНавигации, "КлючНавигации") = Неопределено Тогда
				НоваяСтрока_Релиз = РелизыПоставщика.Добавить();
				НоваяСтрока_Релиз.КлючНавигации = КлючНавигации; 
				НоваяСтрока_Релиз.Наименование = Версия;
				НоваяСтрока_Релиз.РежимCовместимости = ЗначениеИзСтрокиВнутр(ReadFile.Значение("3,1,1,26", Истина));
				Если Не СтрНачинаетсяС(НоваяСтрока_Релиз.РежимCовместимости, "80") И СтрДлина(
					НоваяСтрока_Релиз.РежимCовместимости) < 3 Тогда
					НоваяСтрока_Релиз.РежимCовместимости = "";
				КонецЕсли;
				НоваяСтрока_Релиз.Владелец_Тип = "Справочник.КонфигурацииИБ";
				НоваяСтрока_Релиз.Владелец_КлючНавигации = НоваяСтрока.Конфигурация_КлючНавигации;
				Подсистемы = Новый Массив;
				Инфраструктура.SaveBinaryData(СвойстваБазы1С.fMetadata, ИмяВременногоФайла);
				ReadFile.Открыть(ИмяВременногоФайла, 1);
				Вхождения = ЗначениеИзСтрокиВнутр(ReadFile.Найти("(?i:(\.ВерсииПодсистем"",([a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}),\d+,\d+,""(InfoRg\d+)""))"));
				Если Вхождения.Количество() Тогда
					
					Вхождения = СтрРазделить(Вхождения[0], ",");
					Таблица = СтрЗаменить(Вхождения[4], """", "");
					
					Инфраструктура.SaveBinaryData(СвойстваБазы1С.fMetadataProperties, ИмяВременногоФайла);
					ReadFile.Открыть(ИмяВременногоФайла, 1);
					Вхождения = ЗначениеИзСтрокиВнутр(ReadFile.Найти("(?i:(([a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12})," + Вхождения[1] + ",\d+,""(Версия|ИмяПодсистемы|ЭтоОсновнаяКонфигурация)"",))"));
					Если Вхождения.Количество() = 3 Тогда
						УИД = Новый Соответствие;
						УИДЫ = Новый Массив;
						Для Каждого Вхождение Из Вхождения Цикл 
							_ = СтрРазделить(Вхождение, ",");
							УИД.Вставить(_[0], СтрЗаменить(_[3], """", ""));
							УИДЫ.Добавить(_[0]);
						КонецЦикла;
						
						Инфраструктура.SaveBinaryData(СвойстваБазы1С.fIdMetadata, ИмяВременногоФайла);
						ReadFile.Открыть(ИмяВременногоФайла, 1);
						Вхождения = ЗначениеИзСтрокиВнутр(ReadFile.Найти("(?i:({(" + СтрСоединить(УИДЫ, "|") + "),""Fld"",(\d+)}))"));
						Поля = Новый Структура;
						Для Каждого Вхождение Из Вхождения Цикл 
							_ = СтрРазделить(Вхождение, ",");
							Поля.Вставить(УИД.Получить(Сред(_[0], 2)), Лев(_[2], СтрДлина(_[2])-1));
						КонецЦикла;
						
						ТекстЗапроса = "SELECT ";
						ТекстЗапроса = ТекстЗапроса + "_Fld" + Поля.ИмяПодсистемы + ",";
						ТекстЗапроса = ТекстЗапроса + "_Fld" + Поля.Версия + ",";
						ТекстЗапроса = ТекстЗапроса + "_Fld" + Поля.ЭтоОсновнаяКонфигурация;
						ТекстЗапроса = ТекстЗапроса + " FROM [" + Элемент.name + "].dbo._" + Таблица;
						Для Каждого Строка Из Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапроса) Цикл
							Подсистемы.Добавить(Строка[0] + "|" + Строка[1] + "|" + Строка[2].Unload()[0]);
						КонецЦикла;
						
					КонецЕсли;
	
				КонецЕсли;
				НоваяСтрока_Релиз.Подсистемы = СтрСоединить(Подсистемы, ";");
				ЗаполнитьКлючДанных(НоваяСтрока_Релиз);
			КонецЕсли;
											
		#КонецОбласти
									
			Отбор = Новый Структура;
			Отбор.Вставить("БазаДанных_КлючНавигации", НоваяСтрока.КлючНавигации);
			Отбор.Вставить("Релиз_КлючНавигации", КлючНавигации);
			Если Не УстановленныеРелизыПоставщика.НайтиСтроки(Отбор).Количество() Тогда
				УстановленныйРелиз = УстановленныеРелизыПоставщика.Добавить();
				УстановленныйРелиз.Период = Дата(1990, 1, 1);
				УстановленныйРелиз.БазаДанных_Тип = "Справочник.БазыДанных";
				УстановленныйРелиз.БазаДанных_КлючНавигации = НоваяСтрока.КлючНавигации;
				УстановленныйРелиз.Релиз_Тип = "Справочник.РелизыПоставщика";
				УстановленныйРелиз.Релиз_КлючНавигации = КлючНавигации;
			КонецЕсли;

			users = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапросаListUsers(Элемент.name))[1];
			Для Каждого user Из users Цикл
				
//				SaveBinaryData(user.data, ИмяВременногоФайла);
//				ReadFile.Открыть(ИмяВременногоФайла, 1);
				
				НоваяСтрока_Пользователь = ПользователиБД.Добавить();
				НоваяСтрока_Пользователь.БазаДанных_Тип = "Справочник.БазыДанных";
				НоваяСтрока_Пользователь.БазаДанных_КлючНавигации = НоваяСтрока.КлючНавигации;
//				НоваяСтрока_Пользователь.Идентификатор = ЗначениеИзСтрокиВнутр(ReadFile.Значение("0", Истина));
				НоваяСтрока_Пользователь.ДатаИзменения = Инфраструктура.SQLДата(user.Changed);
				НоваяСтрока_Пользователь.Имя = user.Name;
				НоваяСтрока_Пользователь.ПоказыватьВСпискеВыбора = user.Show.GetValue(0);
				НоваяСтрока_Пользователь.ПолноеИмя = user.Descr;
				НоваяСтрока_Пользователь.ПользовательОС = user.OSName;
				НоваяСтрока_Пользователь.ЭтоАдминистратор = user.AdmRole.GetValue(0);

			КонецЦикла;
		
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Инфраструктура.ОтключитьADO(ADO.Соединение);
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		~Пропустить1C:
		
		ЗаполнитьКлючДанных(НоваяСтрока);
		
	КонецЦикла;
	
	Инфраструктура.ОтключитьADO(ADO.Соединение);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Справочник_БазыДанных", БазыДанных);
	Результат.Вставить("Справочник_КонфигурацииИБ", КонфигурацииИБ);
	Результат.Вставить("Справочник_РелизыПоставщика", РелизыПоставщика);
	Результат.Вставить("РегистрСведений_УстановленныеРелизыПоставщика", УстановленныеРелизыПоставщика);
	Результат.Вставить("РегистрСведений_ПользователиБД", ПользователиБД);
	Возврат Результат;
	
КонецФункции

Функция КопииБазДанных(Параметры, backup_finish_date) Экспорт

	ADO = Инфраструктура.СоединениеADO(Параметры);
	Если ADO.ОшибкаПодключенияКомпоненты Тогда
		 ВызватьИсключение ADO.ПодробноеОписаниеОшибки; 
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		Backups = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапросаBackupDB(), backup_finish_date);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Инфраструктура.ОтключитьADO(ADO.Соединение);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	ИначеЕсли Backups = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	КопииБазДанных = ПустаяТаблицаКопииБазДанных();
	БазыДанных = ПустаяТаблицаБазыДанных();
	СервераБазДанных = ПустаяТаблицаСервераБазДанных();
	Компьютеры = ПустаяТаблицаКомпьютеры();
	
	Для Каждого Элемент Из Backups Цикл

		НоваяСтрока = КопииБазДанных.Добавить();
		НоваяСтрока.Наименование = СтрШаблон("%1/%2 от %3", Элемент.db_server, Элемент.db_name,
			Элемент.backup_finish_date);
		НоваяСтрока.ДатаНачалаКопирования = Элемент.backup_start_date;
		НоваяСтрока.ДатаОкончанияКопирования = Элемент.backup_finish_date;
		НоваяСтрока.Размер_Данных = Элемент.file_size_D;
		НоваяСтрока.Размер_Журнала = Элемент.file_size_L;
		НоваяСтрока.Размер = Элемент.backup_size;
		//Объект.ПолноеИмя = Элемент.backup_file;
		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
			Элемент.db_server, Элемент.db_name, Элемент.backup_finish_date);
		НоваяСтрока.Владелец_Тип = "Справочник.БазыДанных";
		НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
			Элемент.db_server, Элемент.db_name);
			
		ЗаполнитьКлючДанных(НоваяСтрока);

		Если БазыДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда

			КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;

			НоваяСтрока = БазыДанных.Добавить();
			НоваяСтрока.Наименование = Элемент.db_name;
			НоваяСтрока.ДатаСоздания = Элемент.db_creation_date;
			НоваяСтрока.КлючНавигации = КлючНавигации;
			НоваяСтрока.Владелец_Тип = "Справочник.СервераБазДанных";
			НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
				Элемент.db_server);

			Если СервераБазДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда

				КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;

				НоваяСтрока = СервераБазДанных.Добавить();
				НоваяСтрока.Наименование = Элемент.db_server;
				НоваяСтрока.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД." + Параметры.ТипСУБД);
				НоваяСтрока.КлючНавигации = КлючНавигации;
				НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
				НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server);

				Если Компьютеры.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда

					КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
					
					НоваяСтрока = Компьютеры.Добавить();
					НоваяСтрока.Наименование = Элемент.db_server;
					НоваяСтрока.КлючНавигации = КлючНавигации;

				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Справочник_КопииБазДанных", КопииБазДанных);
	Результат.Вставить("Справочник_БазыДанных", БазыДанных);
	Результат.Вставить("Справочник_СервераБазДанных", СервераБазДанных);
	Результат.Вставить("Справочник_Компьютеры", Компьютеры);
	Возврат Результат;
	
КонецФункции

Функция СобытияРезервногоВосстановления(Параметры, restore_date) Экспорт

	ADO = Инфраструктура.СоединениеADO(Параметры);
	Если ADO.ОшибкаПодключенияКомпоненты Тогда
		 ВызватьИсключение ADO.ПодробноеОписаниеОшибки; 
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		RestoreHistory = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапросаRestoreHistoryDB(), restore_date);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Инфраструктура.ОтключитьADO(ADO.Соединение);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если RestoreHistory = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СобытияРезервногоВосстановления = ПустаяТаблицаСобытияРезервногоВосстановления();
	БазыДанных = ПустаяТаблицаБазыДанных();
	Компьютеры = ПустаяТаблицаКомпьютеры();
	СервераБазДанных = ПустаяТаблицаСервераБазДанных();
	КопииБазДанных = ПустаяТаблицаКопииБазДанных();
	
	ИмяКомпьютера = ИмяКомпьютера();
	
	ТипыРезервнойКопииSQL = Новый Соответствие;
	ТипыРезервнойКопииSQL.Вставить("D", ПредопределенноеЗначение("Перечисление.ТипыРезервнойКопииSQL.ФайлДанных"));
	ТипыРезервнойКопииSQL.Вставить("L", ПредопределенноеЗначение("Перечисление.ТипыРезервнойКопииSQL.Журнал"));
	ТипыРезервнойКопииSQL.Вставить("F", ПредопределенноеЗначение("Перечисление.ТипыРезервнойКопииSQL.ПолнотекстовыйКаталог"));
	ТипыРезервнойКопииSQL.Вставить("mdf", ПредопределенноеЗначение("Перечисление.ТипыРезервнойКопииSQL.ФайлДанных"));
	ТипыРезервнойКопииSQL.Вставить("ldf", ПредопределенноеЗначение("Перечисление.ТипыРезервнойКопииSQL.Журнал"));
	Для Каждого Элемент Из RestoreHistory Цикл
		
		НоваяСтрока = СобытияРезервногоВосстановления.Добавить();
		НоваяСтрока.Период = Элемент.restore_date;
		НоваяСтрока.БазаДанных_Тип = "Справочник.БазыДанных";
		НоваяСтрока.БазаДанных_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Параметры.ТипСУБД,
			Параметры.Сервер, Элемент.database_name);
		НоваяСтрока.ТипРезервнойКопии = ТипыРезервнойКопииSQL.Получить(?(ПустаяСтрока(Элемент.file_type),
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Элемент.file_name),
			Элемент.file_type));
		НоваяСтрока.ВосстановленныйФайл = Элемент.file_name;
		НоваяСтрока.ДисковыйНакопитель_Тип = "Справочник.ДисковыеНакопители";
		НоваяСтрока.ДисковыйНакопитель_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Лев(
			Элемент.file_drive, 1));
		НоваяСтрока.КопияБазыДанных_Тип = "Справочник.КопииБазДанных";
		НоваяСтрока.КопияБазыДанных_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.backup_db_server,
			Параметры.ТипСУБД, Элемент.backup_db_server, Элемент.backup_db_database, Элемент.backup_finish_date);
		НоваяСтрока.Размер = Элемент.file_size;
		
		Если БазыДанных.Найти(НоваяСтрока.БазаДанных_КлючНавигации, "КлючНавигации") = Неопределено Тогда
			
			НоваяСтрока2 = БазыДанных.Добавить();
			НоваяСтрока2.Наименование = Элемент.database_name;
			НоваяСтрока2.КлючНавигации = НоваяСтрока.БазаДанных_КлючНавигации; 
			НоваяСтрока2.Владелец_Тип = "Справочник.СервераБазДанных";
			НоваяСтрока2.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Параметры.ТипСУБД,
				Параметры.Сервер);
		
		КонецЕсли;
		
		Если КопииБазДанных.Найти(НоваяСтрока.КопияБазыДанных_КлючНавигации, "КлючНавигации") = Неопределено Тогда

				КлючНавигации = НоваяСтрока.КопияБазыДанных_КлючНавигации;
				
				НоваяСтрока = КопииБазДанных.Добавить();
				НоваяСтрока.Наименование = СтрШаблон("%1/%2 от %3", Элемент.backup_db_server, Элемент.backup_db_database,
					Элемент.backup_finish_date);
				НоваяСтрока.ДатаНачалаКопирования = Элемент.backup_start_date;
				НоваяСтрока.ДатаОкончанияКопирования = Элемент.backup_finish_date;
				НоваяСтрока.Размер = Элемент.backup_size;
				НоваяСтрока.КлючНавигации = КлючНавигации;
				НоваяСтрока.Владелец_Тип = "Справочник.БазыДанных";
				НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.backup_db_server,
					Параметры.ТипСУБД, Элемент.backup_db_server, Элемент.backup_db_database);
		
				Если БазыДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда
		
					КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
		
					НоваяСтрока = БазыДанных.Добавить();
					НоваяСтрока.Наименование = Элемент.backup_db_database;
					НоваяСтрока.КлючНавигации = КлючНавигации;
					НоваяСтрока.Владелец_Тип = "Справочник.СервераБазДанных";
					НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.backup_db_server,
						Параметры.ТипСУБД, Элемент.backup_db_server);
		
					Если СервераБазДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда
		
						КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
		
						НоваяСтрока = СервераБазДанных.Добавить();
						НоваяСтрока.Наименование = Элемент.backup_db_server;
						НоваяСтрока.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД." + Параметры.ТипСУБД);
						НоваяСтрока.КлючНавигации = КлючНавигации;
						НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
						НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.backup_db_server);
		
						Если Компьютеры.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда
		
							КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
							
							НоваяСтрока = Компьютеры.Добавить();
							НоваяСтрока.Наименование = Элемент.backup_db_server;
							НоваяСтрока.КлючНавигации = КлючНавигации;
		
						КонецЕсли;
					КонецЕсли;
		
				КонецЕсли;
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрСведений_СобытияРезервногоВосстановления", СобытияРезервногоВосстановления);
	Результат.Вставить("Справочник_БазыДанных", БазыДанных);
	Результат.Вставить("Справочник_Компьютеры", Компьютеры);
	Результат.Вставить("Справочник_СервераБазДанных", СервераБазДанных);
	Результат.Вставить("Справочник_КопииБазДанных", КопииБазДанных);
	Возврат Результат;
	
КонецФункции

Функция ХранилищаРезервныхКопийБД(Параметры) Экспорт  
	
	ADO = Инфраструктура.СоединениеADO(Параметры);
	Если ADO.ОшибкаПодключенияКомпоненты Тогда
		 ВызватьИсключение ADO.ПодробноеОписаниеОшибки; 
	КонецЕсли;
	
	ТекстЗапроса = "SELECT physical_device_name FROM msdb.dbo.backupmediafamily";
	ТекстОшибки = "";
	Попытка
		files = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, ТекстЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Инфраструктура.ОтключитьADO(ADO.Соединение);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если files = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	files.Свернуть("physical_device_name");
	
	ХранилищаРезервныхКопийБД = ПустаяТаблицаХранилищаРезервныхКопийБД();
	Компьютеры = ПустаяТаблицаКомпьютеры();
	
	ИмяКомпьютера = ИмяКомпьютера();
	
	Каталоги = Новый Массив;
	Для Каждого Элемент Из files Цикл
		Файл = Новый Файл(Элемент.physical_device_name);
		Если Файл.Существует() Тогда
			
			Если Не Каталоги.Найти(НРег(Файл.Путь)) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Каталоги.Добавить(НРег(Файл.Путь));
			
			Компьютер = ?(СтрНачинаетсяС(Файл.Путь, "\\"), СтрРазделить(Файл.Путь, "\", Ложь)[0], ИмяКомпьютера);
			
			НоваяСтрока = ХранилищаРезервныхКопийБД.Добавить();
			НоваяСтрока.ПолноеИмя = Файл.Путь;
			НоваяСтрока.Компьютер_Тип = "Справочник.Компьютеры";
			НоваяСтрока.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(Компьютер);

			Если Компьютеры.Найти(НоваяСтрока.Компьютер_КлючНавигации, "КлючНавигации") = Неопределено Тогда

				КлючНавигации = НоваяСтрока.Компьютер_КлючНавигации;

				НоваяСтрока = Компьютеры.Добавить();
				НоваяСтрока.Наименование = Компьютер;
				НоваяСтрока.КлючНавигации = КлючНавигации;

			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла;
	ХранилищаРезервныхКопийБД.Свернуть(СтрСоединить(ОбщегоНазначения.ВыгрузитьКолонку(
		ХранилищаРезервныхКопийБД.Колонки, "Имя"), ","));
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрСведений_ХранилищаРезервныхКопийБД", ХранилищаРезервныхКопийБД);
	Результат.Вставить("Справочник_Компьютеры", Компьютеры);
	Возврат Результат;
	
КонецФункции

Функция РасположенияКопийБазДанных(Параметры, ХранилищаРезервныхКопийБД, ФайлыКопийБазДанных) Экспорт

	ФайлыКопийБазДанных.Индексы.Добавить("Компьютер,Файл");
	Отбор = Новый Структура("Компьютер,Файл");
	
	Пакеты = Новый Массив;
	Запросы0 = Новый Массив;
	Запросы1 = Новый Массив;
	
	Для Каждого Хранилище Из ХранилищаРезервныхКопийБД Цикл
		
		Если Не Хранилище.Учитывать Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Компьютер = Хранилище.Компьютер;
		Для Каждого Файл Из НайтиФайлы(Хранилище.ПолноеИмя, "*.bak", Хранилище.ИскатьВПодкаталогах) Цикл
			
			Если СтрЧислоВхождений(Файл.ПолноеИмя, "\$RECYCLE.BIN\") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Файл = Инфраструктура.КлючНавигации(Файл.ПолноеИмя, Файл.Размер(), Файл.ПолучитьВремяИзменения());
			Строки = ФайлыКопийБазДанных.НайтиСтроки(Отбор);
			Для Каждого Элемент Из Строки Цикл
				Элемент.Существует = Истина;
			КонецЦикла;
			Если Строки.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запросы0.Количество() = 100 Тогда
				Пакеты.Добавить(СтрСоединить(Запросы0, ";" + Символы.ПС) + ";" + СтрСоединить(Запросы1, Символы.ПС
					+ "UNION ALL"));
				Запросы0.Очистить();
				Запросы1.Очистить();
			КонецЕсли;
			Блоки = СтрРазделить(ТекстЗапросаRestoreHeaderonly(Файл.ПолноеИмя, Запросы0.Количество()), ";");
			Запросы1.Добавить(Блоки[Блоки.ВГраница()]);
			Блоки.Удалить(Блоки.ВГраница());
			Запросы0.Добавить(СтрСоединить(Блоки, ";"));
			
		КонецЦикла;
		
	КонецЦикла;
	Если Запросы0.Количество() Тогда
		Пакеты.Добавить(СтрСоединить(Запросы0, ";" + Символы.ПС) + ";" + СтрСоединить(Запросы1, Символы.ПС
			+ "UNION ALL"));
	КонецЕсли;
		
	ADO = Инфраструктура.СоединениеADO(Параметры);
	Если ADO.ОшибкаПодключенияКомпоненты Тогда
		 ВызватьИсключение ADO.ПодробноеОписаниеОшибки; 
	КонецЕсли;
	
	BackupFiles = Неопределено;
	Для Каждого Запрос Из Пакеты Цикл
		ТекстОшибки = "";
		Попытка
			Ответ = Инфраструктура.ВыполнитьЗапросADO(ADO.Соединение, Запрос);
			ДополнитьТаблицу(Ответ[Ответ.ВГраница()], BackupFiles);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		Если Не ПустаяСтрока(ТекстОшибки) Или BackupFiles = Неопределено Тогда
			Инфраструктура.ОтключитьADO(ADO.Соединение);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	Инфраструктура.ОтключитьADO(ADO.Соединение);
	
	Если BackupFiles = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РасположенияКопийБазДанных = ПустаяТаблицаРасположенияКопийБазДанных();
	КопииБазДанных = ПустаяТаблицаКопииБазДанных();
	БазыДанных = ПустаяТаблицаБазыДанных();
	СервераБазДанных = ПустаяТаблицаСервераБазДанных();
	Компьютеры = ПустаяТаблицаКомпьютеры();
	
	ИмяКомпьютера = ИмяКомпьютера(); 
	
	ADSU = Новый COMОбъект("ADsSecurityUtility");
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Pattern = "[A-F0-9]{8}(?:-[A-F0-9]{4}){3}-[A-F0-9]{12}";
		
	Для Каждого Элемент Из BackupFiles Цикл
		
		Файл = Новый Файл(Элемент.backup_name);
		Компьютер = ?(СтрНачинаетсяС(Файл.Путь, "\\"), СтрРазделить(Файл.Путь, "\", Ложь)[0], ИмяКомпьютера);
			
		НоваяСтрока = РасположенияКопийБазДанных.Добавить();
		НоваяСтрока.КопияБазыДанных_Тип = "Справочник.КопииБазДанных";
		НоваяСтрока.КопияБазыДанных_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
				Элемент.db_server, Элемент.db_name, Элемент.backup_finish_date);
				
		Вхождения = RegExp.Execute(Элемент.BackupSetGUID);
		Если Вхождения.Count Тогда
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор(Вхождения.Item(0).Value);
		КонецЕсли;
		
		НоваяСтрока.Владелец_Тип = "Справочник.Пользователи";
		НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(ADSU.GetSecurityDescriptor(Файл.ПолноеИмя, 1, 1).owner); // DOMEN\USER_NAME
		НоваяСтрока.Компьютер_Тип = "Справочник.Компьютеры";
		НоваяСтрока.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(Компьютер);
		НоваяСтрока.КонтрольнаяСумма = Инфраструктура.КлючНавигации(Файл.ПолноеИмя, Файл.Размер(),
				Файл.ПолучитьВремяИзменения());
		НоваяСтрока.ПолноеИмя = Файл.ПолноеИмя;
		
		Если КопииБазДанных.Найти(НоваяСтрока.КопияБазыДанных_КлючНавигации, "КлючНавигации") = Неопределено Тогда

			КлючНавигации = НоваяСтрока.КопияБазыДанных_КлючНавигации;

			НоваяСтрока = КопииБазДанных.Добавить();
			НоваяСтрока.Наименование = СтрШаблон("%1/%2 от %3", Элемент.db_server, Элемент.db_name,
				Элемент.backup_finish_date);
			НоваяСтрока.ДатаНачалаКопирования = Элемент.backup_start_date;
			НоваяСтрока.ДатаОкончанияКопирования = Элемент.backup_finish_date;
			НоваяСтрока.Размер = Элемент.backup_size;
			НоваяСтрока.КлючНавигации = КлючНавигации;
			НоваяСтрока.Владелец_Тип = "Справочник.БазыДанных";
			НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
				Элемент.db_server, Элемент.db_name);

			Если БазыДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда

				КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;

				НоваяСтрока = БазыДанных.Добавить();
				НоваяСтрока.Наименование = Элемент.db_name;
				НоваяСтрока.КлючНавигации = КлючНавигации;
				НоваяСтрока.Владелец_Тип = "Справочник.СервераБазДанных";
				НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server, Параметры.ТипСУБД,
					Элемент.db_server);

				Если СервераБазДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации")
					= Неопределено Тогда

					КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;

					НоваяСтрока = СервераБазДанных.Добавить();
					НоваяСтрока.Наименование = Элемент.db_server;
					НоваяСтрока.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД." + Параметры.ТипСУБД);
					НоваяСтрока.КлючНавигации = КлючНавигации;
					НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
					НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Элемент.db_server);

					Если Компьютеры.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда

						КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;

						НоваяСтрока = Компьютеры.Добавить();
						НоваяСтрока.Наименование = Элемент.db_server;
						НоваяСтрока.КлючНавигации = КлючНавигации;

					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрСведений_РасположенияКопийБазДанных", РасположенияКопийБазДанных);
	Результат.Вставить("Справочник_КопииБазДанных", КопииБазДанных);
	Результат.Вставить("Справочник_БазыДанных", БазыДанных);
	Результат.Вставить("Справочник_СервераБазДанных", СервераБазДанных);
	Результат.Вставить("Справочник_Компьютеры", Компьютеры);	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОдинС

Функция Платформы() Экспорт

	ТЗ = ПустаяТаблицаПлатформы();
	
	ИмяКомпьютера = ИмяКомпьютера();
	КлючНавигации_Компьютер = Инфраструктура.КлючНавигации(ИмяКомпьютера);
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Pattern = "[A-F0-9]{8}(?:-[A-F0-9]{4}){3}-[A-F0-9]{12}";

//	реестр windows
	Реестр = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
	СписокПО = Неопределено;
	Раздел = "Software\Microsoft\Windows\CurrentVersion\Uninstall";
	Реестр.EnumKey("2147483650", Раздел, СписокПО);
	Если СписокПО = Null Тогда
		Раздел = "Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall";
		Реестр.EnumKey("2147483650", Раздел, СписокПО);
	КонецЕсли;
	КолонкиПуть = СтрРазделить("КаталогУстановки,ИсходныйКаталогУстановки", ",");
	КаталогиУстановки = Новый Массив;
	Для Каждого Элемент Из СписокПО Цикл
		ТекущийРаздел = Раздел + "\" + Элемент;
		InstallLocation = Неопределено;
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "InstallLocation", InstallLocation);
		Если InstallLocation = Null Или Не СтрЧислоВхождений(InstallLocation, "\1cv8\") Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТЗ.Добавить();
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "DisplayName", НоваяСтрока.Наименование);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "Comments", НоваяСтрока.Описание);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "InstallDate", НоваяСтрока.ДатаУстановки);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "InstallLocation", НоваяСтрока.КаталогУстановки);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "InstallSource", НоваяСтрока.ИсходныйКаталогУстановки);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "Publisher", НоваяСтрока.Поставщик);
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "DisplayVersion", НоваяСтрока.Версия);
		Идентификатор = Неопределено;
		Реестр.GetStringValue("2147483650", ТекущийРаздел, "ModifyPath", Идентификатор);
		Вхождения = RegExp.Execute(Идентификатор);
		Если Вхождения.Count Тогда
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор(Вхождения.Item(0).Value);
		КонецЕсли;

		Для Каждого Ключ Из КолонкиПуть Цикл
			НоваяСтрока[Ключ] = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(НоваяСтрока[Ключ], Истина).ПолноеИмя;
		КонецЦикла;
		
		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, НоваяСтрока.Идентификатор);
		НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
		НоваяСтрока.Владелец_КлючНавигации = КлючНавигации_Компьютер;
		
		ЗаполнитьКлючДанных(НоваяСтрока);
		
		КаталогиУстановки.Добавить(НоваяСтрока.КаталогУстановки);
		
	КонецЦикла;

//	Win32_Product
//	ТекстЗапроса = "SELECT
//				   |	PackageName,
//				   |	Caption,
//				   |	Description,
//				   |	HelpLink,
//				   |	HelpTelephone,
//				   |	InstallDate,
//				   |	InstallLocation,
//				   |	InstallSource,
//				   |	Name,
//				   |	Vendor,
//				   |	Version
//				   |FROM
//				   |	Win32_Product
//				   |WHERE Vendor LIKE '%1C%'
//				   |		OR Vendor LIKE '%1С%'";
//	Для Каждого ЗначениеWMI Из ВыполнитьMWI(ТекстЗапроса) Цикл
//		НоваяСтрока = ТЗ.Добавить();
//		НоваяСтрока.Наименование = ЗначениеWMI.Properties_.Item("Name").Value;
//		НоваяСтрока.КраткоеОписание = ЗначениеWMI.Properties_.Item("Caption").Value;
//		НоваяСтрока.Описание = ЗначениеWMI.Properties_.Item("Description").Value;
//		НоваяСтрока.ИмяПакета = ЗначениеWMI.Properties_.Item("PackageName").Value;
//		НоваяСтрока.Адрес = ЗначениеWMI.Properties_.Item("HelpLink").Value;
//		НоваяСтрока.Телефон = ЗначениеWMI.Properties_.Item("HelpTelephone").Value;
//		НоваяСтрока.ДатаУстановки = ЗначениеWMI.Properties_.Item("InstallDate").Value;
//		НоваяСтрока.КаталогУстановки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
//			ЗначениеWMI.Properties_.Item("InstallLocation").Value, Истина).ПолноеИмя;
//		НоваяСтрока.ИсходныйКаталогУстановки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
//			ЗначениеWMI.Properties_.Item("InstallSource").Value, Истина).ПолноеИмя;
//		НоваяСтрока.Поставщик = ЗначениеWMI.Properties_.Item("Vendor").Value;
//		НоваяСтрока.Версия = ЗначениеWMI.Properties_.Item("Version").Value;
//		НоваяСтрока.Идентификатор = ЗначениеWMI.Properties_.Item("IdentifyingNumber").Value;
//		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, НоваяСтрока.Идентификатор);
//		НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
//		НоваяСтрока.Владелец_КлючНавигации = КлючНавигации_Компьютер;
//		
//		ЗаполнитьКлючДанных(НоваяСтрока);
//		
//		КаталогиУстановки.Добавить(НоваяСтрока.КаталогУстановки);
//		
//	КонецЦикла;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Истина;
	Для Каждого ЗначениеWMI Из Инфраструктура.ВыполнитьMWI(
		"SELECT PathName FROM Win32_Service WHERE PathName LIKE '%ragent.exe%' OR PathName LIKE '%ras.exe%' OR PathName LIKE '%dbgs.exe%' OR PathName LIKE '%crserver.exe%'") Цикл

		RegExp.Pattern = """([^""]+)""";
		Вхождения = RegExp.Execute(ЗначениеWMI.Properties_.Item("PathName").Value);
		Если Не Вхождения.Count Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогУстановки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
					ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
					Вхождения.Item(0).SubMatches(0)).Путь, Истина).Путь).ПолноеИмя;
		Если Не КаталогиУстановки.Найти(КаталогУстановки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Наименование = "<создан по ссылки>";
		НоваяСтрока.КаталогУстановки = КаталогУстановки;
		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, КаталогУстановки);
		НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
		НоваяСтрока.Владелец_КлючНавигации = КлючНавигации_Компьютер;
		
		ЗаполнитьКлючДанных(НоваяСтрока); 
		
	КонецЦикла;

	Возврат Новый Структура("Справочник_Платформы", ТЗ);

КонецФункции

Функция Службы() Экспорт

	ТЗ = ПустаяТаблицаСлужбы();
	
	ИмяКомпьютера = ИмяКомпьютера();

	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;

	ТекстЗапроса = "SELECT
				   |	Caption,
				   |	Description,
				   |	DisplayName,
				   |	InstallDate,
				   |	Name,
				   |	PathName,
				   |	ServiceType,
				   |	Started,
				   |	StartMode,
				   |	StartName,
				   |	State,
				   |	Status,
				   |	SystemName
				   |FROM
				   |	Win32_Service
				   |WHERE PathName LIKE '%ragent.exe%'
				   |		OR PathName LIKE '%ras.exe%'
				   |		OR PathName LIKE '%dbgs.exe%'
				   |		OR PathName LIKE '%crserver.exe%'";
	Для Каждого ЗначениеWMI Из Инфраструктура.ВыполнитьMWI(ТекстЗапроса) Цикл

		RegExp.Pattern = "^""([^""]+)""";
		Вхождения = RegExp.Execute(ЗначениеWMI.Properties_.Item("PathName").Value);
		Если Не Вхождения.Count = 1 Тогда
			Продолжить;
		КонецЕсли;
		Вхождение = Вхождения.Item(0);

		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Наименование = ЗначениеWMI.Properties_.Item("Name").Value;
		НоваяСтрока.КраткоеОписание = ЗначениеWMI.Properties_.Item("Caption").Value;
		НоваяСтрока.Описание = ЗначениеWMI.Properties_.Item("Description").Value;
		НоваяСтрока.ДатаУстановки = ЗначениеWMI.Properties_.Item("InstallDate").Value;
		НоваяСтрока.ПолныйПуть = ЗначениеWMI.Properties_.Item("PathName").Value;
		НоваяСтрока.Тип = ЗначениеWMI.Properties_.Item("ServiceType").Value;
		НоваяСтрока.Запущена = ЗначениеWMI.Properties_.Item("Started").Value;
		НоваяСтрока.РежимЗапуска = ЗначениеWMI.Properties_.Item("StartMode").Value;
		НоваяСтрока.Пользователь = ЗначениеWMI.Properties_.Item("StartName").Value;
		НоваяСтрока.Состояние = ЗначениеWMI.Properties_.Item("State").Value;
		НоваяСтрока.Статус = ЗначениеWMI.Properties_.Item("Status").Value;
		НоваяСтрока.ИмяСистемы = ЗначениеWMI.Properties_.Item("SystemName").Value;

		ИсполняемыйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вхождение.SubMatches(0));
		НоваяСтрока.ТипСлужбы = ПредопределенноеЗначение("Перечисление.ТипыСлужб." + НРег(ИсполняемыйФайл.ИмяБезРасширения));
		КаталогУстановки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
			ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИсполняемыйФайл.Путь, Истина).Путь).ПолноеИмя;

		Аргументы = Сред(НоваяСтрока.ПолныйПуть, Вхождение.Length + 1);
		RegExp.Pattern = "(?:-{1,2}|/)?\b(srvc|agent|instsrvc|rmsrvc|usr|pwd|start|stop|port|regport|range|seclev|d" 
			+ "|pingPeriod|pingTimeout|debug|debugServerAddr|debugServerPort|debugServerPwd|cluster|service|daemon"
			+ "|addr|a|p|r|ownerPID|opid|password|notify)\b";
		Вхождения = RegExp.Execute(Аргументы);
		Ключи = Новый Массив;
		Ключи.Добавить("<exe>=" + ИсполняемыйФайл.ПолноеИмя);
		Для Индекс = 0 По Вхождения.Count - 1 Цикл

			Вхождение = Вхождения.Item(Индекс);
			Позиция = Вхождение.FirstIndex + Вхождение.Length + 1;
			Значение = Сред(Аргументы, Позиция, ?(Индекс = Вхождения.Count - 1, СтрДлина(Аргументы), Вхождения.Item(
				Индекс + 1).FirstIndex - Позиция));
			Если ПустаяСтрока(Значение) Тогда
				Ключи.Добавить(Вхождение.SubMatches(0));
			ИначеЕсли НоваяСтрока.ТипСлужбы = ПредопределенноеЗначение("Перечисление.ТипыСлужб.RAS") И НРег(
				Вхождение.SubMatches(0)) = "port" Тогда
				Значения = СтрРазделить(СокрЛП(СтрЗаменить(Значение, "=", "")), " ");
				Ключи.Добавить(СтрШаблон("%1=%2", Вхождение.SubMatches(0), Значения[0]));
				Если Значения.Количество() = 2 Тогда
					Ключи.Добавить(СтрШаблон("%1=%2", "ragent", Значения[1]));
				КонецЕсли;
			Иначе
				Ключи.Добавить(СтрШаблон("%1=%2", Вхождение.SubMatches(0),
					СистемаСопровожденияКлиентСервер.ЗначениеИзСтроки(СокрЛП(Значение))));
			КонецЕсли;
			
		КонецЦикла;
		НоваяСтрока.Ключи = СтрСоединить(Ключи, ",");

		НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, НоваяСтрока.Наименование);
		НоваяСтрока.Владелец_Тип = "Справочник.Платформы";
		НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, КаталогУстановки);
		
		ЗаполнитьКлючДанных(НоваяСтрока);

	КонецЦикла;

	Возврат Новый Структура("Справочник_Службы", ТЗ);

КонецФункции

Функция Кластеры() Экспорт

//	https://its.1c.ru/db/v8310doc#bookmark:adm:TI000000501

	Если Не ПодключитьВнешнююКомпоненту("ОбщийМакет.ReadFile", "def") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ReadFile = Новый("AddIn.def.ReadFileOneC");

	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Истина;

	Кластеры = ПустаяТаблицаКластеры();
	Администраторы = ПустаяТаблицаАдминистраторы();
	ИнформационныеБазы = ПустаяТаблицаИнформационныеБазы();
	РабочиеСерверы = ПустаяТаблицаРабочиеСерверы();
	НазначенияФункциональности = ПустаяТаблицаНазначенияФункциональности();
	МенеджерыКластера = ПустаяТаблицаМенеджерыКластера();
	ПрофилиБезопасности = ПустаяТаблицаПрофилиБезопасности();
	ВиртуальныеКаталоги = ПустаяТаблицаВиртуальныеКаталоги();
	РазрешенныеCOMКлассы = ПустаяТаблицаРазрешенныеCOMКлассы();
	ВнешниеКомпоненты = ПустаяТаблицаВнешниеКомпоненты();
	ВнешниеМодули = ПустаяТаблицаВнешниеМодули();
	РазрешеннныеПриложения = ПустаяТаблицаРазрешеннныеПриложения();
	РесурсыИнтернет = ПустаяТаблицаРесурсыИнтернет();
	СчетчикиПотребленияРесурсов = ПустаяТаблицаСчетчикиПотребленияРесурсов();
	ОграниченияПотребленияРесурсов = ПустаяТаблицаОграниченияПотребленияРесурсов();
	БазыДанных = ПустаяТаблицаБазыДанных();
	СервераБазДанных = ПустаяТаблицаСервераБазДанных();
	Компьютеры = ПустаяТаблицаКомпьютеры();

	ЗащищенноеСоединение = Новый Массив;
	ЗащищенноеСоединение.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЗащищенногоСоединения.Выключено"));
	ЗащищенноеСоединение.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЗащищенногоСоединения.ТолькоСоединение"));
	ЗащищенноеСоединение.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЗащищенногоСоединения.Постоянно"));

	ТипТребования = Новый Массив;
	ТипТребования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТребований.НеНазначать"));
	ТипТребования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТребований.Авто"));
	ТипТребования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТребований.Назначать"));

	ТипОтбора = Новый Массив;
	ТипОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОтбора.ВсеВыбранные"));
	ТипОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОтбора.ВсеКромеВыбранных"));
	ТипОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОтбора.Все"));

	Действие = Новый Массив;
	Действие.Добавить(ПредопределенноеЗначение("Перечисление.Действия.ПустаяСсылка"));
	Действие.Добавить(ПредопределенноеЗначение("Перечисление.Действия.ПонижениеПриоритетаПотока"));
	Действие.Добавить(ПредопределенноеЗначение("Перечисление.Действия.ПрерываниеСерверногоВызова"));
	Действие.Добавить(ПредопределенноеЗначение("Перечисление.Действия.ЗавершениеСеанса"));
	
	ИмяКомпьютера = ИмяКомпьютера();
	
	Каталоги = Новый Массив;
	Для Каждого ЗначениеWMI Из Инфраструктура.ВыполнитьMWI("SELECT PathName FROM Win32_Service WHERE PathName LIKE '%ragent.exe%'") Цикл

		RegExp.Pattern = """([^""]+)"".+-d\s*""([^""]+)""";
		Вхождения = RegExp.Execute(ЗначениеWMI.Properties_.Item("PathName").Value);
		Если Не Вхождения.Count Тогда
			Продолжить;
		КонецЕсли;

//		КаталогУстановки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
//			ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
//			Вхождения.Item(0).SubMatches(0)).Путь, Истина).Путь).ПолноеИмя;
		Каталог = Вхождения.Item(0).SubMatches(1);
		Если Не Каталоги.Найти(Каталог) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Каталоги.Добавить(Каталог);

		Файл = Новый Файл(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, "1cv8wsrv.lst"));
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		ReadFile.Открыть(Файл.ПолноеИмя, 2);
		wsrv = ЗначениеИзСтрокиВнутр(ReadFile.Текст(Истина));
		Для НомерК = 1 По wsrv[0].ВГраница() Цикл

			item = wsrv[0][НомерК];

			Кластер = Кластеры.Добавить();
			Кластер.Идентификатор = item[0];
			Кластер.Наименование = item[1];
			Кластер.IPПорт = item[2];
			Кластер.ЗащищенноеСоединение = ЗащищенноеСоединение[item[5]];
			Кластер.ИнтервалПерезапуска = item[6];
			Кластер.ЗавершатьПроцессы = item[14];
			Кластер.ЗаписыватьДамп = item[15];
			Кластер.ЗавершатьЧерез = item[7];
			Кластер.ПриоритетПоПамяти = item[12];
			Кластер.Компьютер_Тип = "Справочник.Компьютеры";
			Кластер.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(?(item[3] = "127.0.0.1" Или НРег(item[3])
				= "localhost", ИмяКомпьютера, item[3]));
			Кластер.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Каталог, Кластер.Идентификатор);
			Кластер.Владелец_Тип = "Справочник.Службы";
			Кластер.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Каталог);
			
			ЗаполнитьКлючДанных(Кластер);
			
			Файл = Новый Файл(Каталог + "\reg_" + Формат(Кластер.IPПорт, "ЧГ=") + "\1CV8Clst.lst");
			Если Не Файл.Существует() Тогда
				Продолжить;
			КонецЕсли;
		
//			lst[1] Описание кластера
			ReadFile.Открыть(Файл.ПолноеИмя, 2);
			lst = ЗначениеИзСтрокиВнутр(ReadFile.Текст(Истина));
			lstItem = lst[2];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				Ключи = Новый Соответствие;
				Для Каждого Параметр Из СтрРазделить(item[8], ";") Цикл
					мПараметр = СтрРазделить(Параметр, "=");
					Ключи.Вставить(мПараметр[0], мПараметр[1]);
				КонецЦикла;
				
				ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД." + Ключи.Получить("DBMS"));
				
				НоваяСтрока = ИнформационныеБазы.Добавить();
				НоваяСтрока.Наименование = Ключи.Получить("Ref");
				НоваяСтрока.Идентификатор = item[0];
				НоваяСтрока.Описание = Ключи.Получить("Descr");
				НоваяСтрока.ЗащищенноеСоединение = ЗащищенноеСоединение[Число(Ключи.Получить("SLev"))];
				//					НоваяСтрока.ПользовательСервераБД = Ключи.Получить("DBUID");
				НоваяСтрока.Язык = Ключи.Получить("Locale");
				НоваяСтрока.СмещениеДат = Ключи.Получить("SQLYOffs");
				//				 	НоваяСтрока.ПолучатьКлиентскуюЛицензиюССервера = Ключи.Получить("LicDstr") = "Y";
				НоваяСтрока.ПолучатьКлиентскуюЛицензиюССервера = item[12];
				НоваяСтрока.БлокировкаНачалоСеансовВключена = item[10][0];
				НоваяСтрока.Начало = item[10][1];
				НоваяСтрока.Конец = item[10][2];
				НоваяСтрока.Сообщение = item[10][3];
				НоваяСтрока.КодРазрешения = item[10][4];
				НоваяСтрока.ПараметрБлокировки = item[10][5];
				НоваяСтрока.БлокировкаРегламентныхЗаданий = item[11];
				НоваяСтрока.ВнешнееУправлениеСеансами = item[13];
				НоваяСтрока.ОбязательноеИспользованиеВнешнегоУправления = item[14];
				НоваяСтрока.ПрофильБезопасности = item[15];
				НоваяСтрока.ПрофильБезопасностиБезопасногоРежима = item[16];
				НоваяСтрока.РезервированиеРабочийПроцессов = item[18];
				Для Каждого Элемент Из НайтиФайлы(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Файл.Путь,
					Строка(НоваяСтрока.Идентификатор) + "\1Cv8Log"), "*.lgp", Истина) Цикл
					НоваяСтрока.ПоследнееСобытие = Макс(НоваяСтрока.ПоследнееСобытие,
					Элемент.ПолучитьВремяИзменения());
				КонецЦикла;
				НоваяСтрока.БазаДанных_Тип = "Справочник.БазыДанных";
				НоваяСтрока.БазаДанных_КлючНавигации = Инфраструктура.КлючНавигации(Ключи.Получить("DBSrvr"),
				Ключи.Получить("DBMS"), Ключи.Получить("DBSrvr"), Ключи.Получить("DB"));
				НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
				НоваяСтрока.Идентификатор);
				НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
				НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(НоваяСтрока);
				
				Если БазыДанных.Найти(НоваяСтрока.БазаДанных_КлючНавигации, "КлючНавигации") = Неопределено Тогда
					
					КлючНавигации = НоваяСтрока.БазаДанных_КлючНавигации;
					
					НоваяСтрока = БазыДанных.Добавить();
					НоваяСтрока.Наименование = Ключи.Получить("DB");
					НоваяСтрока.КлючНавигации = КлючНавигации;
					НоваяСтрока.Владелец_Тип = "Справочник.СервераБазДанных";
					НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Ключи.Получить("DBSrvr"),
					Ключи.Получить("DBMS"), Ключи.Получить("DBSrvr"));
					
					Если СервераБазДанных.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда
						
						КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
						
						НоваяСтрока = СервераБазДанных.Добавить();
						НоваяСтрока.Наименование = Ключи.Получить("DBSrvr");
						НоваяСтрока.ТипСУБД = ТипСУБД;
						НоваяСтрока.КлючНавигации = КлючНавигации;
						НоваяСтрока.Владелец_Тип = "Справочник.Компьютеры";
						НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(Ключи.Получить("DBSrvr"));
						
						Если Компьютеры.Найти(НоваяСтрока.Владелец_КлючНавигации, "КлючНавигации") = Неопределено Тогда
							
							КлючНавигации = НоваяСтрока.Владелец_КлючНавигации;
							НоваяСтрока = Компьютеры.Добавить();
							НоваяСтрока.Наименование = Ключи.Получить("DBSrvr");
							НоваяСтрока.КлючНавигации = КлючНавигации;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;

			lstItem = lst[4];
			Для Номер = 1 По lstItem.ВГраница() Цикл
								
				item = lstItem[Номер];
				
				НоваяСтрока = Администраторы.Добавить();
				НоваяСтрока.Наименование = item[0];
				НоваяСтрока.Описание = item[1];
				НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
				НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(НоваяСтрока);
				
			КонецЦикла;

			lstItem = lst[5];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				РабочийСервер = РабочиеСерверы.Добавить();
				РабочийСервер.Идентификатор = item[0];
				РабочийСервер.Наименование = item[1];
				РабочийСервер.IPПорт = item[2];
				РабочийСервер.БезопасныйРасходПамяти = item[9];
				РабочийСервер.КритическийОбъемПамяти = item[19];
				РабочийСервер.ДопустимыйОбъемПамяти = item[20];
				РабочийСервер.ИнтервалПревышенияОбъемаПамяти = item[21];
				РабочийСервер.ИмяСлужбыСервера = ?(item.ВГраница() = 22, item[22], "");
				РабочийСервер.КоличествоИБ = item[10];
				РабочийСервер.КоличествоСоединений = item[11];
				РабочийСервер.ПортГлавного = item[18];
				РабочийСервер.МенеджерПодКаждыйСервер = item[14];
				РабочийСервер.ЦентральныйСервер = item[17];
				ДиапазонIPПортов = Новый Массив;
				Для Индекс = 1 По item[5].ВГраница() Цикл
					Если ТипЗнч(item[5][Индекс]) = Тип("Массив") Тогда
						IPПорты = Новый Массив;
						Для Каждого Элемент Из item[5][Индекс] Цикл
							IPПорты.Добавить(Формат(Элемент, "ЧГ=;"));								
						КонецЦикла;
						ДиапазонIPПортов.Добавить(СтрСоединить(IPПорты, ":"));
					Иначе
						ДиапазонIPПортов.Добавить(item[5][Индекс]);
					КонецЕсли;	
				КонецЦикла;
				РабочийСервер.ДиапазонIPПортов = СтрСоединить(ДиапазонIPПортов, ";");
				РабочийСервер.Компьютер_Тип = "Справочник.Компьютеры";
				РабочийСервер.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(?(item[3] = "127.0.0.1" Или НРег(item[3]) = "localhost", ИмяКомпьютера, item[3]));
				РабочийСервер.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				РабочийСервер.Владелец_Тип = "Справочник.Кластеры";
				РабочийСервер.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(РабочийСервер);
				
				Если Компьютеры.Найти(РабочийСервер.Компьютер_КлючНавигации, "КлючНавигации") = Неопределено Тогда
					
					НоваяСтрока = Компьютеры.Добавить();
					НоваяСтрока.Наименование = ?(item[3] = "127.0.0.1" Или НРег(item[3]) = "localhost", ИмяКомпьютера, item[3]);
					НоваяСтрока.КлючНавигации = РабочийСервер.Компьютер_КлючНавигации;
					
				КонецЕсли;
				
				Позиция = lst[14].Найти(РабочийСервер.Идентификатор);
				Если Не Позиция = Неопределено И lst[14].ВГраница() >= Позиция + 1 И lst[14][Позиция + 1][0] Тогда
					
					lstItem_Item = lst[14][Позиция + 1];
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						
						Если ТипЗнч(item[2]) = Тип("Число") Тогда
							item.Вставить(2, "ALL");
						КонецЕсли;
						Если ТипЗнч(item[4]) = Тип("Число") Тогда
							item.Вставить(4, "");
						КонецЕсли;
						Если ТипЗнч(item[6]) = Тип("Число") Тогда
							item.Вставить(6, "");
						КонецЕсли;
						
						НоваяСтрока = НазначенияФункциональности.Добавить();
						НоваяСтрока.Идентификатор = item[0];
						НоваяСтрока.Объект = ПредопределенноеЗначение("Перечисление.ОбъектыТребования." + item[2]);
						НоваяСтрока.Наименование = НоваяСтрока.Объект;
						НоваяСтрока.Тип = ТипТребования[item[7]];
						НоваяСтрока.ДополнительныеПараметры = item[6];
						НоваяСтрока.Приоритет = item[9];
						Если Не ПустаяСтрока(item[4]) Тогда
							НоваяСтрока.ИнформационнаяБаза_Тип = "Справочник.ИнформационныеБазы";
							НоваяСтрока.ИнформационнаяБаза_КлючНавигации = Инфраструктура.КлючНавигации(
							Кластер.Идентификатор, item[4]);
						КонецЕсли;
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(РабочийСервер.Идентификатор, item[0]);
						НоваяСтрока.Владелец_Тип = "Справочник.РабочиеСерверы";
						НоваяСтрока.Владелец_КлючНавигации = РабочийСервер.Идентификатор;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
						Если Не ПустаяСтрока(item[4]) И ИнформационныеБазы.Найти(
							НоваяСтрока.ИнформационнаяБаза_КлючНавигации, "КлючНавигации") = Неопределено Тогда
							
							КлючНавигации = НоваяСтрока.ИнформационнаяБаза_КлючНавигации;
							НоваяСтрока = ИнформационныеБазы.Добавить();
							НоваяСтрока.Наименование = item[4];
							НоваяСтрока.КлючНавигации = КлючНавигации;
							НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
							НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;

			lstItem = lst[6];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				НоваяСтрока = МенеджерыКластера.Добавить();
				НоваяСтрока.Идентификатор = item[0];
				НоваяСтрока.Наименование = item[1];
				НоваяСтрока.Компьютер_Тип = "Справочник.Компьютеры";
				НоваяСтрока.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(?(item[2] = "127.0.0.1" Или НРег(
				item[2]) = "localhost", ИмяКомпьютера, item[2]));
				НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
				НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(НоваяСтрока);
				
				Если Компьютеры.Найти(НоваяСтрока.Компьютер_КлючНавигации, "КлючНавигации") = Неопределено Тогда
					
					КлючНавигации = НоваяСтрока.Компьютер_КлючНавигации;
					НоваяСтрока = Компьютеры.Добавить();
					НоваяСтрока.Наименование = ?(item[2] = "127.0.0.1" Или НРег(item[2]) = "localhost",
					ИмяКомпьютера, item[2]);
					НоваяСтрока.КлючНавигации = КлючНавигации;
					
				КонецЕсли;
				
			КонецЦикла;

			lstItem = lst[16];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				Профиль = ПрофилиБезопасности.Добавить();
				Профиль.Наименование = item[0];
				Профиль.Описание = item[1];
				Профиль.БезопасныйРежим = item[7];
				Профиль.РолиПривилегированногоРежима = item[16];
				Профиль.РолиРасширениеПравДоступа = item[12];
				Профиль.МодулиРасширения = item[14];
				Профиль.НедоступныеМодулиРасширения = item[15];
				Профиль.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				Профиль.Владелец_Тип = "Справочник.Кластеры";
				Профиль.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(Профиль);
				
				lstItem_Item = lst[17];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = ВиртуальныеКаталоги.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.ЛогическийURL = item[1];
						НоваяСтрока.ФизическийURL = item[2];
						НоваяСтрока.Описание = item[5];
						НоваяСтрока.Чтение = item[3];
						НоваяСтрока.Запись = item[4];
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
					КонецЦикла;
					
				КонецЕсли;
				
				lstItem_Item = lst[18];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = РазрешенныеCOMКлассы.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.Файл = item[2];
						НоваяСтрока.Идентификатор = item[3];
						НоваяСтрока.Описание = item[5];
						НоваяСтрока.Компьютер_Тип = "Справочник.Компьютеры";
						НоваяСтрока.Компьютер_КлючНавигации = Инфраструктура.КлючНавигации(?(item[4] = "127.0.0.1"
						Или НРег(item[4]) = "localhost", ИмяКомпьютера, item[4]));
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
						Если Компьютеры.Найти(НоваяСтрока.Компьютер_КлючНавигации, "КлючНавигации")
							= Неопределено Тогда
							
							КлючНавигации = НоваяСтрока.Компьютер_КлючНавигации;
							НоваяСтрока = Компьютеры.Добавить();
							НоваяСтрока.Наименование = ?(item[4] = "127.0.0.1" Или НРег(item[4]) = "localhost",
							ИмяКомпьютера, item[4]);
							НоваяСтрока.КлючНавигации = КлючНавигации;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				lstItem_Item = lst[19];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = ВнешниеКомпоненты.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.КонтрольнаяСумма = ?(item.Количество() = 4, item[2], "");
						НоваяСтрока.Описание = item[item.ВГраница()];
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);						
						
					КонецЦикла;
					
				КонецЕсли;
				
				lstItem_Item = lst[20];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = ВнешниеМодули.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.КонтрольнаяСумма = ?(item.Количество() = 4, item[2], "");
						НоваяСтрока.Описание = item[item.ВГраница()];
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
					КонецЦикла;
					
				КонецЕсли;
				
				lstItem_Item = lst[21];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = РазрешеннныеПриложения.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.ШаблонЗапуска = item[2];
						НоваяСтрока.Описание = item[3];
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
					КонецЦикла;
					
				КонецЕсли;
				
				lstItem_Item = lst[22];
				Если lstItem_Item[0] Тогда
					
					Для Номер1 = 1 По lstItem_Item.ВГраница() Цикл
						
						item = lstItem_Item[Номер1];
						Если Не Профиль.Наименование = item[0] Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = РесурсыИнтернет.Добавить();
						НоваяСтрока.Наименование = item[1];
						НоваяСтрока.Адрес = item[2];
						НоваяСтрока.Порт = item[3];
						НоваяСтрока.ТипРесурса = item[4];
						НоваяСтрока.Описание = item[5];
						НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор,
						Профиль.Наименование, item[1]);
						НоваяСтрока.Владелец_Тип = "Справочник.ПрофилиБезопасности";
						НоваяСтрока.Владелец_КлючНавигации = Профиль.КлючНавигации;
						
						ЗаполнитьКлючДанных(НоваяСтрока);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;

			lstItem = lst[24];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				НоваяСтрока = СчетчикиПотребленияРесурсов.Добавить();
				НоваяСтрока.Наименование = item[0];
				НоваяСтрока.Описание = item[16];
				НоваяСтрока.Длительность = item[1];
				НоваяСтрока.РазделениеДанных = item[2];
				НоваяСтрока.ТипОтбора = ТипОтбора[item[3]];
				НоваяСтрока.Отбор = item[4];
				НоваяСтрока.НакапливатьДлительностьСерверныхВызовов = item[5];
				НоваяСтрока.НакапливатьДлительностьПроцессорногоВремени = item[6];
				НоваяСтрока.НакапливатьДлительностьВызововСУБД = item[10];
				НоваяСтрока.НакапливатьДлительностьВызововСервисов = item[12];
				НоваяСтрока.НакапливатьОбъемИспользуемойПамяти = item[7];
				НоваяСтрока.НакапливатьОбъемЧтенияСДиска = item[8];
				НоваяСтрока.НакапливатьОбъемЗаписиНаДиск = item[9];
				НоваяСтрока.НакапливатьОбъемПереданнойСУБД = item[11];
				НоваяСтрока.НакапливатьКоличествоСерверныхВызовов = item[13];
				НоваяСтрока.НакапливатьКоличествоАктивныхСеансов = item[14];
				НоваяСтрока.НакапливатьКоличествоСеансов = item[15];
				НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
				НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(НоваяСтрока);
				
			КонецЦикла;

			lstItem = lst[25];
			Для Номер = 1 По lstItem.ВГраница() Цикл
				
				item = lstItem[Номер];
				
				НоваяСтрока = ОграниченияПотребленияРесурсов.Добавить();
				НоваяСтрока.Наименование = item[0];
				НоваяСтрока.Описание = item[15];
				НоваяСтрока.Счетчик = item[1];
				НоваяСтрока.Действие = Действие[item[2]];
				НоваяСтрока.ПредельноеДлительностьСерверныхВызовов = item[3];
				НоваяСтрока.ПредельноеДлительностьПроцессорногоВремени = item[4];
				НоваяСтрока.ПредельноеДлительностьВызововСУБД = item[8];
				НоваяСтрока.ПредельноеДлительностьВызововСервисов = item[10];
				НоваяСтрока.ПредельныйОбъемИспользуемойПамяти = item[5];
				НоваяСтрока.ПредельныйОбъемЧтенияСДиска = item[6];
				НоваяСтрока.ПредельныйОбъемЗаписиНаДиск = item[7];
				НоваяСтрока.ПредельныйОбъемПереданнойСУБД = item[9];
				НоваяСтрока.ПредельноеКоличествоСерверныхВызовов = item[11];
				НоваяСтрока.ПредельноеКоличествоАктивныхСеансов = item[12];
				НоваяСтрока.ПредельноеКоличествоСеансов = item[13];
				НоваяСтрока.СообщениеОбОшибке = item[14];
				НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(Кластер.Идентификатор, item[0]);
				НоваяСтрока.Владелец_Тип = "Справочник.Кластеры";
				НоваяСтрока.Владелец_КлючНавигации = Кластер.КлючНавигации;
				
				ЗаполнитьКлючДанных(НоваяСтрока);
				
			КонецЦикла;

		КонецЦикла;

		Для НомерА = 1 По wsrv[1].ВГраница() Цикл
			
			item = wsrv[1][НомерА];
			
			НоваяСтрока = Администраторы.Добавить();
			НоваяСтрока.Наименование = item[0];
			НоваяСтрока.Описание = item[1];
			НоваяСтрока.КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Каталог, item[0]);
			НоваяСтрока.Владелец_Тип = "Справочник.Службы";
			НоваяСтрока.Владелец_КлючНавигации = Инфраструктура.КлючНавигации(ИмяКомпьютера, Каталог);
			
			ЗаполнитьКлючДанных(НоваяСтрока);
			
		КонецЦикла;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Справочник_Кластеры", Кластеры);
	Результат.Вставить("Справочник_Администраторы", Администраторы);
	Результат.Вставить("Справочник_ИнформационныеБазы", ИнформационныеБазы);
	Результат.Вставить("Справочник_РабочиеСерверы", РабочиеСерверы);
	Результат.Вставить("Справочник_НазначенияФункциональности", НазначенияФункциональности);
	Результат.Вставить("Справочник_МенеджерыКластера", МенеджерыКластера);
	Результат.Вставить("Справочник_ПрофилиБезопасности", ПрофилиБезопасности);
	Результат.Вставить("Справочник_ВиртуальныеКаталоги", ВиртуальныеКаталоги);
	Результат.Вставить("Справочник_РазрешенныеCOMКлассы", РазрешенныеCOMКлассы);
	Результат.Вставить("Справочник_ВнешниеКомпоненты", ВнешниеКомпоненты);
	Результат.Вставить("Справочник_ВнешниеМодули", ВнешниеМодули);
	Результат.Вставить("Справочник_РазрешеннныеПриложения", РазрешеннныеПриложения);
	Результат.Вставить("Справочник_РесурсыИнтернет", РесурсыИнтернет);
	Результат.Вставить("Справочник_СчетчикиПотребленияРесурсов", СчетчикиПотребленияРесурсов);
	Результат.Вставить("Справочник_ОграниченияПотребленияРесурсов", ОграниченияПотребленияРесурсов);
	Результат.Вставить("Справочник_БазыДанных", БазыДанных);
	Результат.Вставить("Справочник_СервераБазДанных", СервераБазДанных);
	Результат.Вставить("Справочник_Компьютеры", Компьютеры);
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьКлючДанных(Строка)
	
	Если Строка.Владелец().Колонки.Найти("КонтрольнаяСуммаДанных") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.КонтрольнаяСуммаДанных = Инфраструктура.КлючНавигации(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(
		Строка));
	
КонецПроцедуры

Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник)
	
	Если ТаблицаПриемник = Неопределено Тогда
		ТаблицаПриемник = ТаблицаИсточник;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	КонецЕсли;
	
КонецПроцедуры

#Область ПустаяТаблица

#Область ПК

Функция ПустаяТаблицаКомпьютеры()
	
	ТЗ = ПустаяТаблицаСправочник(Ложь);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаДисковыеНакопители()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "Буква", 1);
	ДобавитьКолонкаСтрока(ТЗ, "ВерсияПрошивки", 50);
	ДобавитьКолонкаСтрока(ТЗ, "ИдентификаторРаздела", 150);
	ДобавитьКолонкаСтрока(ТЗ, "Модель", 150);
	ДобавитьКолонкаСтрока(ТЗ, "Раздел", 150);
	ДобавитьКолонкаЧисло(ТЗ, "РазмерДиска");
	ДобавитьКолонкаЧисло(ТЗ, "РазмерРаздела");
	ДобавитьКолонкаЧисло(ТЗ, "РазмерСвободно");
	ДобавитьКолонкаСтрока(ТЗ, "ТипИнтерфейса", 10);
	ДобавитьКолонкаСтрока(ТЗ, "ФайловаяСистема", 10);
	
	Возврат ТЗ;
КонецФункции

#КонецОбласти

#Область SQL

Функция ПустаяТаблицаСервераБазДанных()
	
	ТЗ = ПустаяТаблицаСправочникИерархический(Ложь);
	ТЗ.Колонки.Добавить("ТипСУБД", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСУБД"));
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаБазыДанных()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаДата(ТЗ, "ДатаСоздания");
	ДобавитьКолонкаЧисло(ТЗ, "ИдентификационныйНомер", 10);
	ДобавитьКолонкаСсылка(ТЗ, "Конфигурация");
	ТЗ.Колонки.Добавить("Cостояние", Новый ОписаниеТипов("ПеречислениеСсылка.CостоянияБазыДанных"));
	ТЗ.Колонки.Добавить("МодельВосстановления", Новый ОписаниеТипов("ПеречислениеСсылка.МоделиВосстановленияБазыДанных"));
	ДобавитьКолонкаДата(ТЗ, "ДатаИзмененияОснКонф");
	ДобавитьКолонкаДата(ТЗ, "ДатаИзмененияКонфБД");
	ДобавитьКолонкаБулево(ТЗ, "ЭтоКонфигурация1С");
	ДобавитьКолонкаСтрока(ТЗ, "ДинамическиеОбъявления", 0);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаКопииБазДанных()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаДата(ТЗ, "ДатаНачалаКопирования");
	ДобавитьКолонкаДата(ТЗ, "ДатаОкончанияКопирования");
	ДобавитьКолонкаЧисло(ТЗ, "Размер_Данных");
	ДобавитьКолонкаЧисло(ТЗ, "Размер_Журнала");
	ДобавитьКолонкаЧисло(ТЗ, "Размер");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаХранилищаРезервныхКопийБД()
	
	ТЗ = Новый ТаблицаЗначений;
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	ДобавитьКолонкаСтрока(ТЗ, "ПолноеИмя", 1024);
//	ДобавитьКолонкаБулево(ТЗ, "ИскатьВПодкаталогах");
//	ДобавитьКолонкаБулево(ТЗ, "Учитывать");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРасположенияКопийБазДанных()
	
	ТЗ = Новый ТаблицаЗначений;
	ДобавитьКолонкаСсылка(ТЗ, "КопияБазыДанных");
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСсылка(ТЗ, "Владелец");
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	ДобавитьКолонкаЧисло(ТЗ, "КонтрольнаяСумма");
	ДобавитьКолонкаСтрока(ТЗ, "ПолноеИмя", 0);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаСобытияРезервногоВосстановления()
	
	ТЗ = Новый ТаблицаЗначений;
	ДобавитьКолонкаДата(ТЗ, "Период");
	ДобавитьКолонкаСсылка(ТЗ, "БазаДанных");
	ТЗ.Колонки.Добавить("ТипРезервнойКопии", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРезервнойКопииSQL"));	
	ДобавитьКолонкаСтрока(ТЗ, "ВосстановленныйФайл", 0);
	ДобавитьКолонкаСсылка(ТЗ, "ДисковыйНакопитель");
	ДобавитьКолонкаСсылка(ТЗ, "КопияБазыДанных");
	ДобавитьКолонкаЧисло(ТЗ, "Размер");
	
	Возврат ТЗ;
КонецФункции

#КонецОбласти

#Область SQL_1C

Функция ПустаяТаблицаКонфигурацииИБ()
	
	ТЗ = ПустаяТаблицаСправочник();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСтрока(ТЗ, "АвторскиеПрава", 255);
	ДобавитьКолонкаСтрока(ТЗ, "АдресКонфигурации", 255);
	ДобавитьКолонкаСтрока(ТЗ, "АдресОбновлений", 255);
	ДобавитьКолонкаСтрока(ТЗ, "АдресПоставщика", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Имя", 80);
	ДобавитьКолонкаСтрока(ТЗ, "Комментарий", 255);
	ДобавитьКолонкаСтрока(ТЗ, "КраткаяИнформация", 255);
	ДобавитьКолонкаСтрока(ТЗ, "ОсновнойРежимЗапуска", 50);
	ДобавитьКолонкаСтрока(ТЗ, "ПодробнаяИнформация", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Поставщик", 255);
	ДобавитьКолонкаЧисло(ТЗ, "Редакция", 3);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРелизыПоставщика()
	
	ТЗ = ПустаяТаблицаСправочникИерархический(Ложь);
	ДобавитьКолонкаСтрока(ТЗ, "РежимCовместимости", 10);
	ДобавитьКолонкаСтрока(ТЗ, "Подсистемы", 0);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаУстановленныеРелизыПоставщика()
	
	ТЗ = Новый ТаблицаЗначений;
	ДобавитьКолонкаДата(ТЗ, "Период");
	ДобавитьКолонкаСсылка(ТЗ, "БазаДанных");
	ДобавитьКолонкаСсылка(ТЗ, "Релиз");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаПользователиБД()

	ТЗ = Новый ТаблицаЗначений();
	ДобавитьКолонкаСсылка(ТЗ, "БазаДанных");
	//ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаДата(ТЗ, "ДатаИзменения");
	ДобавитьКолонкаСтрока(ТЗ, "Имя", 80);
	ДобавитьКолонкаБулево(ТЗ, "ПоказыватьВСпискеВыбора");
	ДобавитьКолонкаСтрока(ТЗ, "ПолноеИмя", 150);
	ДобавитьКолонкаСтрока(ТЗ, "ПользовательОС", 150);
	ДобавитьКолонкаБулево(ТЗ, "ЭтоАдминистратор");

	Возврат ТЗ;
КонецФункции

#КонецОбласти

#Область ОдинС

Функция ПустаяТаблицаПлатформы()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСтрока(ТЗ, "Версия", 15);
	ДобавитьКолонкаДата(ТЗ, "ДатаУстановки");
	ДобавитьКолонкаСтрока(ТЗ, "КаталогУстановки", 0);
	ДобавитьКолонкаСтрока(ТЗ, "ИсходныйКаталогУстановки", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Поставщик", 80);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаСлужбы()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаДата(ТЗ, "ДатаУстановки");
	ДобавитьКолонкаБулево(ТЗ, "Запущена");
	ДобавитьКолонкаСтрока(ТЗ, "ИмяСистемы", 150);
	ДобавитьКолонкаСтрока(ТЗ, "КраткоеОписание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "ПолныйПуть", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Пользователь", 50);
	ДобавитьКолонкаСтрока(ТЗ, "РежимЗапуска", 30);
	ДобавитьКолонкаСтрока(ТЗ, "Состояние", 10);
	ДобавитьКолонкаСтрока(ТЗ, "Статус", 10);
	ДобавитьКолонкаСтрока(ТЗ, "Тип", 30);
	ТЗ.Колонки.Добавить("ТипСлужбы", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСлужб"));
	ДобавитьКолонкаСтрока(ТЗ, "Ключи", 0);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаКластеры()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаЧисло(ТЗ, "IPПорт", 5);
	ДобавитьКолонкаБулево(ТЗ, "ЗавершатьПроцессы");
	ДобавитьКолонкаЧисло(ТЗ, "ЗавершатьЧерез");
	ДобавитьКолонкаБулево(ТЗ, "ЗаписыватьДамп");
	ТЗ.Колонки.Добавить("ЗащищенноеСоединение", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗащищенногоСоединения"));
	ДобавитьКолонкаУИ(ТЗ, "Идентификатор");
	ДобавитьКолонкаЧисло(ТЗ, "ИнтервалПерезапуска");
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	ДобавитьКолонкаБулево(ТЗ, "ПриоритетПоПамяти");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаАдминистраторы()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаИнформационныеБазы()

	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСсылка(ТЗ, "БазаДанных");
	ДобавитьКолонкаБулево(ТЗ, "БлокировкаНачалоСеансовВключена");
	ДобавитьКолонкаБулево(ТЗ, "БлокировкаРегламентныхЗаданий");
	ДобавитьКолонкаСтрока(ТЗ, "ВнешнееУправлениеСеансами", 20);
	ТЗ.Колонки.Добавить("ЗащищенноеСоединение", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗащищенногоСоединения"));
	ДобавитьКолонкаСтрока(ТЗ, "КодРазрешения", 20);
	ДобавитьКолонкаДата(ТЗ, "Конец");
	ДобавитьКолонкаДата(ТЗ, "Начало");
	ДобавитьКолонкаБулево(ТЗ, "ОбязательноеИспользованиеВнешнегоУправления");
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 150);
	ДобавитьКолонкаСтрока(ТЗ, "ПараметрБлокировки", 20);
	ДобавитьКолонкаБулево(ТЗ, "ПолучатьКлиентскуюЛицензиюССервера");
	ДобавитьКолонкаСтрока(ТЗ, "Пользователь", 50);
	ДобавитьКолонкаДата(ТЗ, "ПоследнееСобытие");
	ДобавитьКолонкаСтрока(ТЗ, "ПрофильБезопасности", 20);
	ДобавитьКолонкаСтрока(ТЗ, "ПрофильБезопасностиБезопасногоРежима", 20);
	ДобавитьКолонкаБулево(ТЗ, "РезервированиеРабочийПроцессов");
	ДобавитьКолонкаЧисло(ТЗ, "СмещениеДат", 4);
	ДобавитьКолонкаСтрока(ТЗ, "Сообщение", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Язык", 10);

	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРабочиеСерверы()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаЧисло(ТЗ, "IPПорт", 5);
	ДобавитьКолонкаЧисло(ТЗ, "БезопасныйРасходПамяти");
	ДобавитьКолонкаЧисло(ТЗ, "ДопустимыйОбъемПамяти");
	ДобавитьКолонкаСтрока(ТЗ, "ИмяСлужбыСервера", 150);
	ДобавитьКолонкаЧисло(ТЗ, "ИнтервалПревышенияОбъемаПамяти");
	ДобавитьКолонкаЧисло(ТЗ, "КоличествоИБ", 10);
	ДобавитьКолонкаЧисло(ТЗ, "КоличествоСоединений", 10);
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	ДобавитьКолонкаЧисло(ТЗ, "КритическийОбъемПамяти"); 
	ДобавитьКолонкаБулево(ТЗ, "МенеджерПодКаждыйСервер");
	ДобавитьКолонкаЧисло(ТЗ, "ПортГлавного", 5);
	ДобавитьКолонкаБулево(ТЗ, "ЦентральныйСервер");
	ДобавитьКолонкаСтрока(ТЗ, "ДиапазонIPПортов", 0);

	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаНазначенияФункциональности()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСтрока(ТЗ, "ДополнительныеПараметры", 0);
	ДобавитьКолонкаСсылка(ТЗ, "ИнформационнаяБаза");
	ДобавитьКолонкаЧисло(ТЗ, "Приоритет", 10);
	ТЗ.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыТребований"));
	ТЗ.Колонки.Добавить("Объект", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыТребования"));
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаМенеджерыКластера()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаПрофилиБезопасности()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаБулево(ТЗ, "БезопасныйРежим");
	ДобавитьКолонкаСтрока(ТЗ, "МодулиРасширения", 255);
	ДобавитьКолонкаСтрока(ТЗ, "НедоступныеМодулиРасширения", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "РолиПривилегированногоРежима", 255);
	ДобавитьКолонкаСтрока(ТЗ, "РолиРасширениеПравДоступа", 255);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРазрешеннныеПриложения()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "ШаблонЗапуска", 255);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРазрешенныеCOMКлассы()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаУИ(ТЗ);
	ДобавитьКолонкаСсылка(ТЗ, "Компьютер");
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Файл", 0);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаВиртуальныеКаталоги()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаБулево(ТЗ, "Запись");
	ДобавитьКолонкаСтрока(ТЗ, "ЛогическийURL", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "ФизическийURL", 0);
	ДобавитьКолонкаБулево(ТЗ, "Чтение");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаВнешниеКомпоненты()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "КонтрольнаяСумма", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаВнешниеМодули()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "КонтрольнаяСумма", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаРесурсыИнтернет()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаСтрока(ТЗ, "Адрес", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаЧисло(ТЗ, "Порт", 5);
	ДобавитьКолонкаСтрока(ТЗ, "ТипРесурса", 50);
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаОграниченияПотребленияРесурсов()
	
	ТЗ = ПустаяТаблицаСправочникИерархический();
	ТЗ.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.Действия"));
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеДлительностьВызововСервисов");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеДлительностьВызововСУБД");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеДлительностьПроцессорногоВремени");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеДлительностьСерверныхВызовов");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеКоличествоАктивныхСеансов");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеКоличествоСеансов");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельноеКоличествоСерверныхВызовов");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельныйОбъемЗаписиНаДиск");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельныйОбъемИспользуемойПамяти");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельныйОбъемПереданнойСУБД");
	ДобавитьКолонкаЧисло(ТЗ, "ПредельныйОбъемЧтенияСДиска");
	ДобавитьКолонкаСтрока(ТЗ, "СообщениеОбОшибке", 0);
	ДобавитьКолонкаСтрока(ТЗ, "Счетчик", 80);

	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаСчетчикиПотребленияРесурсов()

	ТЗ = ПустаяТаблицаСправочникИерархический();
	ДобавитьКолонкаЧисло(ТЗ, "Длительность");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьДлительностьВызововСервисов");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьДлительностьВызововСУБД");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьДлительностьПроцессорногоВремени");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьДлительностьСерверныхВызовов");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьКоличествоАктивныхСеансов");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьКоличествоСеансов");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьКоличествоСерверныхВызовов");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьОбъемЗаписиНаДиск");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьОбъемИспользуемойПамяти");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьОбъемПереданнойСУБД");
	ДобавитьКолонкаБулево(ТЗ, "НакапливатьОбъемЧтенияСДиска");
	ДобавитьКолонкаСтрока(ТЗ, "Описание", 255);
	ДобавитьКолонкаСтрока(ТЗ, "Отбор", 255);
	ДобавитьКолонкаБулево(ТЗ, "РазделениеДанных");
	ТЗ.Колонки.Добавить("ТипОтбора", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОтбора"));

	Возврат ТЗ;
КонецФункции

#КонецОбласти

#Область ПустаяТаблица_СлужебныеПроцедурыИФункции

Процедура ДобавитьКолонкаСсылка(ТЗ, ИмяКолонки)
	
	ДобавитьКолонкаСтрока(ТЗ, ИмяКолонки + "_Тип", 150);
	ДобавитьКолонкаЧисло(ТЗ, ИмяКолонки + "_КлючНавигации");
	
КонецПроцедуры

Процедура ДобавитьКолонкаСтрока(ТЗ, ИмяКолонки, Длина)
	
	ТЗ.Колонки.Добавить(ИмяКолонки, ОбщегоНазначения.ОписаниеТипаСтрока(Длина));
	
КонецПроцедуры

Процедура ДобавитьКолонкаЧисло(ТЗ, ИмяКолонки, Длина = 32, Точность = 0)
	
	ТЗ.Колонки.Добавить(ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(Длина, Точность, ДопустимыйЗнак.Неотрицательный));
	
КонецПроцедуры

Процедура ДобавитьКолонкаБулево(ТЗ, ИмяКолонки)
	
	ТЗ.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

Процедура ДобавитьКолонкаДата(ТЗ, ИмяКолонки)
	
	ТЗ.Колонки.Добавить(ИмяКолонки, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
КонецПроцедуры

Процедура ДобавитьКолонкаУИ(ТЗ, ИмяКолонки = "Идентификатор")
	
	ТЗ.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("УникальныйИдентификатор"));
	
КонецПроцедуры

Функция ПустаяТаблицаСправочник(ДинамическиеДанные = Истина)
	
	ТЗ = Новый ТаблицаЗначений;
	ДобавитьКолонкаСтрока(ТЗ, "Наименование", 150);
	ДобавитьКолонкаЧисло(ТЗ, "КлючНавигации");
	Если ДинамическиеДанные Тогда
		ДобавитьКолонкаЧисло(ТЗ, "КонтрольнаяСуммаДанных");
	КонецЕсли;
	ТЗ.Индексы.Добавить("КлючНавигации");
	
	Возврат ТЗ;
КонецФункции

Функция ПустаяТаблицаСправочникИерархический(ДинамическиеДанные = Истина)
	
	ТЗ = ПустаяТаблицаСправочник(ДинамическиеДанные);
	ДобавитьКолонкаСсылка(ТЗ, "Владелец");
	
	Возврат ТЗ;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекстЗапроса

Функция ТекстЗапросаListDB()

	Возврат "-- get description DB 1c --
			|DECLARE @checkDB TABLE (is1C BIT, id INT)
			|DECLARE @name SYSNAME
			|DECLARE line CURSOR FOR SELECT name FROM sys.databases
			|OPEN line
			|FETCH NEXT FROM line INTO @name
			|WHILE @@FETCH_STATUS = 0
			|BEGIN
			|INSERT INTO @checkDB
			|	EXEC ('USE [' + @name + ']; SELECT 1, DB_ID() FROM sys.sysobjects WHERE name = ''Config''')
			|	FETCH NEXT FROM line INTO @name
			|END
			|CLOSE line
			|DEALLOCATE line
			|
			|-- final query --
			|SELECT
			|	db.database_id,
			|	db.name,
			|	db.state,
			|	db.create_date,
			|	db.recovery_model,
			|	ISNULL(db1C.is1C, 0) AS is1C
			|FROM
			|	sys.databases AS db
			|	LEFT JOIN @checkDB AS db1C
			|	ON db.database_id = db1C.id";

КонецФункции

Функция ТекстЗапросаListUsers(ИмяБД)

	Возврат СтрЗаменить("USE [ИмяБД];
						|SELECT
						|	ID,
						|	Name,
						|	Descr,
						|	OSName,
						|	Changed,
						|	Show,
						|	Data,
						|	EAuth,
						|	AdmRole
						|FROM dbo.v8users
						|WHERE NOT Name = ''", "ИмяБД", ИмяБД);
	
КонецФункции

Функция ТекстЗапросаСвойстваБазы1С(ИмяБД)

	Возврат СтрЗаменить("USE [ИмяБД];
	|SELECT 
	|	(SELECT MAX(Modified) FROM dbo.Config) AS modifiedConfig,
	|	(SELECT MAX(Modified) FROM dbo.ConfigSave) AS modifiedConfigSave,
	|	(SELECT BinaryData FROM dbo.Config WHERE FileName = 'DynamicallyUpdated') AS dynamicallyUpdated,
	|	(SELECT BinaryData FROM dbo.Config WHERE FileName = 'root') AS fRoot,
	|	(SELECT BinaryData FROM dbo.Params WHERE FileName = 'a07b62f0-1f01-484a-93d9-d42764cedac0.si') AS fMetadata,
	|	(SELECT BinaryData FROM dbo.Params WHERE FileName = '1a621f0f-5568-4183-bd9f-f6ef670e7090.si') AS fMetadataProperties,
	|	(SELECT BinaryData FROM dbo.Params WHERE FileName = 'DBNames') AS fIdMetadata", "ИмяБД", ИмяБД);
	
КонецФункции

Функция ТекстЗапросаBackupDB()

	Возврат "SELECT
	|	backupset.server_name AS db_server,
	|	backupset.database_name AS db_name,
	|	backupset.database_creation_date AS db_creation_date,
	|	backupset.backup_start_date AS backup_start_date,
	|	backupset.backup_finish_date AS backup_finish_date,
	|	backupfile_D.file_size AS file_size_D,
	|	backupfile_L.file_size AS file_size_L,
	|	backupset.backup_size AS backup_size,
	|	backupmediafamily.physical_device_name AS backup_file
	|FROM
	|	msdb.dbo.backupset AS backupset
	|		INNER JOIN msdb.dbo.backupmediafamily AS backupmediafamily
	|		ON backupset.media_set_id = backupmediafamily.media_set_id
	|			AND backupset.server_name = @@servername
	|		LEFT JOIN msdb.dbo.backupfile AS backupfile_D
	|		ON backupset.backup_set_id = backupfile_D.backup_set_id
	|			AND backupfile_D.file_type = 'D'
	|		LEFT JOIN msdb.dbo.backupfile AS backupfile_L
	|		ON backupset.backup_set_id = backupfile_L.backup_set_id
	|			AND backupfile_L.file_type = 'L'
	|WHERE backupset.backup_finish_date >= ?";

КонецФункции

Функция ТекстЗапросаRestoreHeaderonly(backupFile, Индекс = 0)

	Возврат СтрЗаменить(СтрЗаменить("DECLARE @backupFile[Индекс] VARCHAR(MAX) = '[backupFile]';
			|DECLARE @headers[Индекс] TABLE
			|( 
			|    BackupName NVARCHAR(128),
			|    BackupDescription NVARCHAR(255),
			|    BackupType SMALLINT,
			|    ExpirationDate DATETIME,
			|    Compressed BIT,
			|    Position SMALLINT,
			|    DeviceType TINYINT, 
			|    UserName NVARCHAR(128),
			|    ServerName NVARCHAR(128),
			|    DatabaseName NVARCHAR(128),
			|    DatabaseVersion INT,
			|    DatabaseCreationDate DATETIME,
			|    BackupSize NUMERIC(20, 0),
			|    FirstLSN NUMERIC(25, 0),
			|    LastLSN NUMERIC(25, 0),
			|    CheckpointLSN NUMERIC(25, 0),
			|    DatabaseBackupLSN NUMERIC(25, 0),
			|    BackupStartDate DATETIME,
			|    BackupFinishDate DATETIME,
			|    SortOrder SMALLINT,
			|    CodePage SMALLINT,
			|    UnicodeLocaleId INT,
			|    UnicodeComparisonStyle INT,
			|    CompatibilityLevel TINYINT,
			|    SoftwareVendorId INT,
			|    SoftwareVersionMajor INT,
			|    SoftwareVersionMinor INT,
			|    SoftwareVersionBuild INT,
			|    MachineName NVARCHAR(128),
			|    Flags INT,
			|    BindingId UNIQUEIDENTIFIER,
			|    RecoveryForkId UNIQUEIDENTIFIER,
			|    Collation NVARCHAR(128),
			|    FamilyGUID UNIQUEIDENTIFIER,
			|    HasBulkLoggedData BIT,
			|    IsSnapshot BIT,
			|    IsReadOnly BIT,
			|    IsSingleUser BIT,
			|    HasBackupChecksums BIT,
			|    IsDamaged BIT,
			|    BeginsLogChain BIT,
			|    HasIncompleteMetaData BIT,
			|    IsForceOffline BIT,
			|    IsCopyOnly BIT,
			|    FirstRecoveryForkID UNIQUEIDENTIFIER,
			|    ForkPointLSN NUMERIC(25, 0),
			|    RecoveryModel NVARCHAR(60),
			|    DifferentialBaseLSN NUMERIC(25, 0),
			|    DifferentialBaseGUID UNIQUEIDENTIFIER,
			|    BackupTypeDescription NVARCHAR(60),
			|    BackupSetGUID UNIQUEIDENTIFIER,
			|    CompressedBackupSize BIGINT,
			|    Containment TINYINT,
			|    KeyAlgorithm NVARCHAR(32),
			|    EncryptorThumbprint VARBINARY(20),
			|    EncryptorType NVARCHAR(32)
			|); 
			|INSERT INTO @headers[Индекс] EXEC('RESTORE HEADERONLY FROM DISK = ''' + @backupFile[Индекс] + '''');
			|SELECT 
			|	ServerName AS db_server,
			|	DatabaseName AS db_name,
			|	BackupSize AS backup_size,
			|	BackupStartDate AS backup_start_date,
			|	BackupFinishDate AS backup_finish_date,
			|	@backupFile[Индекс] AS backup_name,
			|	BackupSetGUID
			|FROM @headers[Индекс]", "[backupFile]", backupFile), "[Индекс]", Формат(Индекс, "ЧН=0; ЧГ=;"));

КонецФункции

Функция ТекстЗапросаRestoreHistoryDB()

	Возврат "SELECT
			|	restorehistory.destination_database_name AS database_name,
			|	restorehistory.restore_date AS restore_date,
			|	restorefile.destination_phys_drive AS file_drive,
			|	restorefile.destination_phys_name AS file_name,
			|	backupfile.file_type AS file_type,
			|	backupfile.file_size AS file_size,
			|	backupset.server_name AS backup_db_server,
			|	backupset.database_name AS backup_db_database,
			|	backupset.backup_start_date AS backup_start_date,
			|	backupset.backup_finish_date AS backup_finish_date,
			|	backupset.backup_size AS backup_size,
			|	backupmediafamily.physical_device_name AS backup_file
			|FROM
			|	msdb.dbo.restorehistory AS restorehistory
			|	INNER JOIN msdb.dbo.restorefile AS restorefile
			|	ON restorehistory.restore_history_id = restorefile.restore_history_id
			|	INNER JOIN msdb.dbo.backupset AS backupset
			|		INNER JOIN msdb.dbo.backupmediafamily AS backupmediafamily
			|		ON backupset.media_set_id = backupmediafamily.media_set_id
			|	ON restorehistory.backup_set_id = backupset.backup_set_id
			|	LEFT JOIN msdb.dbo.backupfile AS backupfile
			|	ON restorehistory.backup_set_id = backupfile.backup_set_id
			|		AND restorefile.destination_phys_name = backupfile.physical_name
			|WHERE restorehistory.restore_date >= ?";

КонецФункции

#КонецОбласти

#КонецОбласти