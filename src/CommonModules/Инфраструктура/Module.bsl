#Область СлужебныйПрограммныйИнтерфейс

//@skip-check method-too-many-params
Функция КлючНавигации(Элемент1, 
	Элемент2 = "440e3512-0df8-4081-a10d-9dc877fbe625",
	Элемент3 = "440e3512-0df8-4081-a10d-9dc877fbe625", 
	Элемент4 = "440e3512-0df8-4081-a10d-9dc877fbe625", 
	Элемент5 = "440e3512-0df8-4081-a10d-9dc877fbe625") Экспорт

	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(ХешЗначение(Элемент1));
	Если Элемент2 <> "440e3512-0df8-4081-a10d-9dc877fbe625" Тогда
		Хеш.Добавить(ХешЗначение(Элемент2));
	КонецЕсли;
	Если Элемент3 <> "440e3512-0df8-4081-a10d-9dc877fbe625" Тогда
		Хеш.Добавить(ХешЗначение(Элемент3));
	КонецЕсли;
	Если Элемент4 <> "440e3512-0df8-4081-a10d-9dc877fbe625" Тогда
		Хеш.Добавить(ХешЗначение(Элемент4));
	КонецЕсли;
	Если Элемент5 <> "440e3512-0df8-4081-a10d-9dc877fbe625" Тогда
		Хеш.Добавить(ХешЗначение(Элемент5));
	КонецЕсли;
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ХешЗначение(Значение)

	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат НРег(СокрЛП(Значение));

	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Или ТипЗнч(Значение) = Тип("Дата") Или ТипЗнч(Значение) = Тип("Булево")
		Или ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат XMLСтрока(Значение);

	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Лев(СтрРазделить(ЗначениеВСтрокуВнутр(Значение), ",")[2], 35);
		
	Иначе
		Возврат ЗначениеВСтрокуВнутр(Значение);

	КонецЕсли;

КонецФункции

#Область WMI

Функция ВыполнитьMWI(Text, Преобразовать = Ложь) Экспорт 

	ЛокаторWMI = Новый COMОбъект("WbemScripting.SWbemLocator");
	Запрос = ЛокаторWMI.ConnectServer(".");

	Попытка
		РезультатWMI = Запрос.ExecQuery(Text);
		Если Преобразовать Тогда
			Возврат ПреобразоватьРезультатыWMIвТаблицуЗначений(РезультатWMI);
		Иначе
			Возврат РезультатWMI;
		КонецЕсли;
	Исключение
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецФункции

Функция ПреобразоватьРезультатыWMIвТаблицуЗначений(РезультатыWMI) Экспорт 

	ТЗ = Новый ТаблицаЗначений;
	Для Каждого ЗначениеWMI Из РезультатыWMI Цикл
		СтрокаТаблицыWMI = ТЗ.Добавить();
		Свойства = ПолучитьСтруктуруИзЗначенияWMIЛкс(ЗначениеWMI.Properties_);
		Если Не ТЗ.Колонки.Количество() Тогда

			Для Каждого Свойство Из ЗначениеWMI.Properties_ Цикл

				ИмяТипа = "";
				Попытка
					Квалификаторы = Свойство.Qualifiers_;
				Исключение
					// Нет у системных свойств
					Квалификаторы = Новый Массив;
				КонецПопытки;
				Для Каждого Квалификатор Из Квалификаторы Цикл
					Если НРег(Квалификатор.Name) = "cimtype" Тогда
						ИмяТипа = Нрег(Квалификатор.Value);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Найти(ИмяТипа, "int") > 0 Тогда
					ИмяТипа = "Число";
				ИначеЕсли Найти(ИмяТипа, "date") > 0 Или Найти(ИмяТипа, "time") > 0 Тогда
					ИмяТипа = "Дата";
				ИначеЕсли Найти(ИмяТипа, "string") > 0 Или Найти(ИмяТипа, "char") > 0 Тогда
					ИмяТипа = "Строка";
				ИначеЕсли ТипЗнч(ИмяТипа) = Тип("COMОбъект") Тогда
					ИмяТипа = " {WbemScripting.SwbemLocator}";
				КонецЕсли;

				Попытка
					ОписаниеТипов = Новый ОписаниеТипов(ИмяТипа, , , , Новый КвалификаторыСтроки(1024)); // Доделать распознавание типов
				Исключение
					ОписаниеТипов = Новый ОписаниеТипов;
				КонецПопытки;

				Попытка
					КвалификаторОписание = Свойство.qualifiers_.item("DisplayName");
					ПредставлениеСвойства = КвалификаторОписание.Value;
				Исключение
					ПредставлениеСвойства = "";
				КонецПопытки;

				ТЗ.Колонки.Добавить(Свойство.Name, ОписаниеТипов, ПредставлениеСвойства);
			КонецЦикла;

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаТаблицыWMI, Свойства);
		СистемныеСвойства = ПолучитьСтруктуруИзЗначенияWMIЛкс(ЗначениеWMI.SystemProperties_);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыWMI, СистемныеСвойства);

	КонецЦикла;

	Возврат ТЗ;

КонецФункции

Функция ПолучитьСтруктуруИзЗначенияWMIЛкс(ЗначениеWMI, datetime = Истина) Экспорт 

	Результат = Новый Структура;
	Для Каждого СвойствоWMI Из ЗначениеWMI Цикл
		Если ТипЗнч(СвойствоWMI.Value) = Тип("COMSafeArray") Тогда
			ЗначениеСвойства = СвойствоWMI.Value.Выгрузить();// возможно массив надо будет переделать
		Иначе
			ЗначениеСвойства = СвойствоWMI.Value;
			Если datetime И СвойствоWMI.CIMTYPE = 101 Тогда  //datetime
				ЗначениеСвойства = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ЗначениеСвойства);
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить(СвойствоWMI.Name, ЗначениеСвойства);
	КонецЦикла;
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ADO

// Соединение ADO.
// 
// Параметры:
//  Параметры - СтрокаТаблицыЗначений, Структура, ВыборкаИзРезультатаЗапроса - Параметры подключения
//  		*ТипСУБД - ПеречислениеСсылка.ТипыСУБД.Имя
//  		*Сервер - Строка
//  		*База - Строка - Необязательно
//  		*Пользователь - Строка
//  		*Пароль - Строка
// 
// Возвращаемое значение:
//  Структура:
//    * Соединение - COMОбъект
//                 - Неопределено - указатель на COM-объект соединения ADO или Неопределено в случае ошибки;
//    * КраткоеОписаниеОшибки - Строка - краткое описание ошибки;
//    * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки;
//    * ОшибкаПодключенияКомпоненты - Булево - флаг ошибки подключения COM.
//
Функция СоединениеADO(Знач Параметры) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Соединение");
	Результат.Вставить("КраткоеОписаниеОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("ОшибкаПодключенияКомпоненты", Ложь);
	
	ЕстьБаза = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "База");
	
	Шаблон = Новый Массив;
	Если Параметры.ТипСУБД = "MSSQLServer" Тогда
		
		Шаблон.Добавить("Provider=SQLOLEDB");
		Шаблон.Добавить("Data Source=""[Сервер]""");
		Если ЕстьБаза Тогда
			Шаблон.Добавить("Initial Catalog=""[База]""");
		КонецЕсли;
		Шаблон.Добавить("User Id=""[Пользователь]""");
		Шаблон.Добавить("Password=""[Пароль]""");
		
	Иначе
		Результат.Соединение = Неопределено;
		Результат.КраткоеОписаниеОшибки = СтрШаблон("Тип СУБД '%1' непредусмотрено!", Параметры.ТипСУБД);
		Результат.ПодробноеОписаниеОшибки = Результат.КраткоеОписаниеОшибки;
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Возврат Результат;
	КонецЕсли;
	СтрокаСоединения = СтрСоединить(Шаблон, ";");

	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[Сервер]", Параметры.Сервер);
	Если ЕстьБаза Тогда
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[База]", Параметры.База);
	КонецЕсли;
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[Пользователь]", Параметры.Пользователь);
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[Пароль]", Параметры.Пароль);

	Попытка
		Результат.Соединение = Новый COMОбъект("ADODB.Connection");
		Результат.Соединение.ConnectionTimeOut = 7; // секунд. 5 - недостаточно 
		Результат.Соединение.CommandTimeout = 300; // секунд
		Результат.Соединение.CursorLocation = 3; // курсоры на стороне клиента
		Результат.Соединение.Open(СтрокаСоединения, Параметры.Пользователь, Параметры.Пароль, -1);
	Исключение
		
		Результат.Соединение = Неопределено;
		
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Информация = ИнформацияОбОшибке();
		Результат.КраткоеОписаниеОшибки = КраткоеПредставлениеОшибки(Информация);
		Результат.ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(Информация);
		
	КонецПопытки;

	Возврат Результат;

КонецФункции

Процедура ОтключитьADO(Соединение) Экспорт 

	Соединение.Close();

	Соединение = Неопределено;

КонецПроцедуры

// Выполнить запрос ADO.
// 
// Параметры:
//  Соединение - Соединение ADO - см. ИнфраструктураУзлаВызовСервера.СоединениеADO()
//  ТекстЗапроса - Строка - Текст запроса ADO
//  Параметры - Значение,Массив,Неопределено - Параметры. В MS SQL пустая дата = Дата(1753, 1, 1)
//  ПреобразоватьВ1С - Булево - Преобразовать в 1С
// 
// Возвращаемое значение:
//  Неопределено, SqlDataReader,ТаблицаЗначений, Массив{SqlDataReader,ТаблицаЗначений} - результат запроса ADO
Функция ВыполнитьЗапросADO(Соединение, ТекстЗапроса, Знач Параметры = Неопределено, ПреобразоватьВ1С = Истина) Экспорт 

	Соединение.Errors.Clear();

	ЗапросADO = Новый COMОбъект("ADODB.Command");
	ЗапросADO.ActiveConnection = Соединение;
	ЗапросADO.CommandText = ТекстЗапроса;
	ЗапросADO.CommandType = 8;
	ЗапросADO.CommandTimeout = 120;

	Если Параметры <> Неопределено Тогда

		Пока ЗапросADO.Parameters.Count > 0 Цикл
			ЗапросADO.Parameters.Delete(0);
		КонецЦикла;

		Если ТипЗнч(Параметры) <> Тип("Массив") Тогда 
			Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры);
		КонецЕсли;
		Для Индекс = 0 По Параметры.ВГраница() Цикл

			Parameter = ЗапросADO.CreateParameter();

			Значение = Параметры[Индекс];

			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Parameter.Type = ?(Цел(Значение) = Значение, ?(?(Значение < 0, -1, 1) * Значение <= 2147483647, 3, 20),
					14);

			ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
				Parameter.Type = ?(СтрДлина(Значение) <= 4000, 200, 201);
				Parameter.Size = СтрДлина(Значение);

			ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
				Parameter.Type = ?(НачалоДня(Значение) = Значение, 133, 135);

			ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
				Parameter.Type = 11;

			КонецЕсли;

			Parameter.Value = Значение;
			
			ЗапросADO.Parameters.Append(Parameter);

		КонецЦикла;

	КонецЕсли;

	РезультатЗапросаADO = ЗапросADO.Execute(0);
	Если РезультатЗапросаADO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекстОшибки = Новый Массив;
	Если Соединение.Errors.Count > 0 Тогда

		Номер = 1;
		Для Каждого Error Из Соединение.Errors Цикл

			Ошибка = Новый Массив;
			Ошибка.Добавить("Описание: " + Error.Description);
			Ошибка.Добавить("Номер: " + Error.Number);
			Ошибка.Добавить("Источник: " + Error.Source);
			Ошибка.Добавить("Состояние: " + Error.SQLState);
			Ошибка.Добавить("Код: " + Error.NativeError);

			ТекстОшибки.Добавить(СтрШаблон("%1:%2", Номер, СтрСоединить(Ошибка, "; ")));

		КонецЦикла;

		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

	РезультатПакета = Новый Массив;
	ПакетныйРежим = Соединение.Properties("Multiple Results").Value <> 0;
	Пока РезультатЗапросаADO <> Неопределено Цикл

		Если РезультатЗапросаADO.State И ПреобразоватьВ1С Тогда
			
			Если Не РезультатЗапросаADO.EOF И Не РезультатЗапросаADO.BOF Тогда
				РезультатЗапросаADO.MoveFirst();
			КонецЕсли; 
	
			ТЗ = Новый ТаблицаЗначений;
			Для Каждого Field Из РезультатЗапросаADO.Fields Цикл
				
				Если Field.Type = 3 Или Field.Type = 4 Или Field.Type = 5 Или Field.Type = 14 Или Field.Type = 20 Или Field.Type = 131 Или Field.Type = 139 Тогда // Integer,Single,Double,Decimal,BigInt,Numeric,VarNumeric
					ТипКолонки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой));
					
				ИначеЕсли Field.Type = 129 Или Field.Type = 130 Или Field.Type = 200 Или Field.Type = 201 Или Field.Type = 202 Или Field.Type = 203 Тогда // Char,WChar,VarChar,LongVarChar,VarWChar,LongVarWChar
					ТипКолонки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
					
				ИначеЕсли Field.Type = 133 Или Field.Type = 134 Или Field.Type = 135 Тогда // DBDate,DBTime,DBTimeStamp
					ТипКолонки = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
					
				ИначеЕсли Field.Type = 111 Тогда // Boolean
					ТипКолонки = Новый ОписаниеТипов("Булево");
					
				Иначе
					//ВызватьИсключение НСтр("ru = 'Недопустимый тип результата ADO'");
					ТипКолонки = Неопределено;
				КонецЕсли;
				
				ТЗ.Колонки.Добавить(?(ПустаяСтрока(Field.Name), "Колонка_" + ТЗ.Колонки.Количество(), Field.Name), ТипКолонки);
			КонецЦикла;
			
			Пока Не РезультатЗапросаADO.EOF Цикл 
				НоваяСтрока = ТЗ.Добавить();
				Для Каждого Колонка Из РезультатЗапросаADO.Fields Цикл
					НоваяСтрока[Колонка.Name] = Колонка.Value;
				КонецЦикла;
				РезультатЗапросаADO.MoveNext();
			КонецЦикла;
			
			РезультатПакета.Добавить(ТЗ);
		Иначе
			РезультатПакета.Добавить(РезультатЗапросаADO);
		КонецЕсли;

		РезультатЗапросаADO = ?(ПакетныйРежим, РезультатЗапросаADO.NextRecordset(), Неопределено);
	КонецЦикла;

	Возврат ?(РезультатПакета.Количество() = 1, РезультатПакета[0], РезультатПакета);

КонецФункции

Процедура SaveBinaryData(Value, File) Экспорт  
	
	Stream = Новый COMОбъект("ADODB.Stream");
	Stream.Type = 1;
	Stream.Open();
	Stream.Write(Value);
	Stream.SaveToFile(File, 2);
	Stream.Close();
	
КонецПроцедуры

Функция SQLДата(Дата) Экспорт 

	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат '00010101';

	ИначеЕсли ТипЗнч(Дата) = Тип("Строка") Тогда
		Значение = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Дата, "-", ""), " ", ""), ":", ""));

	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда
		Значение = Дата;

	Иначе
		ВызватьИсключение НСтр("ru = 'Тип преобразования не определен!'", "ru");
	КонецЕсли;

	Возврат ДобавитьМесяц(Значение, -24000); // 2000

КонецФункции

#КонецОбласти

#КонецОбласти