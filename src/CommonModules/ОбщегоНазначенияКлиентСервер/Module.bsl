///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Данные

// Дополняет таблицу значений - приемник данными из таблицы значений - источника.
// Типы ТаблицаЗначений, ДеревоЗначений, ТабличнаяЧасть не доступны на клиенте.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений
//                  - ДеревоЗначений
//                  - ТабличнаяЧасть
//                  - ДанныеФормыКоллекция - таблица, из которой будут
//                    браться строки для заполнения;
//  ТаблицаПриемник - ТаблицаЗначений
//                  - ДеревоЗначений
//                  - ТабличнаяЧасть
//                  - ДанныеФормыКоллекция - таблица, в которую будут
//                    добавлены строки из таблицы-источника.
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с файлами.
//

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры:
//  ИмяКаталога  - Строка - путь к каталогу файла на диске.
//  ИмяФайла     - Строка - имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
//
Функция ПолучитьПолноеИмяФайла(Знач ИмяКаталога, Знач ИмяФайла) Экспорт

	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(СтрНайти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции

// Раскладывает полное имя файла на составляющие.
//
// Параметры:
//  ПолноеИмяФайла - Строка - полный путь к файлу или каталогу.
//  ЭтоКаталог - Булево - признак того, что передано имя каталога.
//
// Возвращаемое значение:
//   Структура - имя файла, разложенное на составные части(аналогично свойствам объекта Файл):
//     ПолноеИмя - содержит полный путь к файлу, т.е. полностью соответствует входному параметру ПолноеИмяФайла.
//     Путь - содержит путь к каталогу, в котором лежит файл.
//     Имя - содержит имя файла с расширением, без пути к файлу.
//     Расширение - содержит расширение файла.
//     ИмяБезРасширения - содержит имя файла без расширения и без пути к файлу.
// 
// Пример:
//  ПолноеИмяФайла = "c:\temp\test.txt";
//  ЧастиИмениФайла = РазложитьПолноеИмяФайла(ПолноеИмяФайла);
//  
//  В результате структура полей будет заполнена следующим образом:
//    ПолноеИмя: "c:\temp\test.txt",
//    Путь: "c:\temp\",
//    Имя: "test.txt",
//    Расширение: ".txt",
//    ИмяБезРасширения: "test".
//
Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоКаталог = Ложь) Экспорт
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	ЗаполнитьЗначенияСвойств(СтруктураИмениФайла, Новый Файл(ПолноеИмяФайла));
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	Возврат РасширениеФайла;
	
КонецФункции

#КонецОбласти

#Область ПроверкаТипаЗначения

// Возвращает признак того, что переданное значение является, либо не является, числом.
//
// Параметры:
//  ПроверяемоеЗначение - Строка - значение, которое проверяется на соответствие числу.
//
// Возвращаемое значение:
//   Булево - признак того, что переданное значение является, либо не является, числом.
//
Функция ЭтоЧисло(Знач ПроверяемоеЗначение) Экспорт 
	
	Если ПроверяемоеЗначение = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	
КонецФункции

#КонецОбласти

#Область ПриведениеЗначения

// Приводит строковое значение к дате.
//
// Параметры:
//  Значение - Строка - строковое значение, которое приводится к дате.
//
// Возвращаемое значение:
//   Дата - приведенное значение.
//
Функция СтрокаВДату(Знач Значение) Экспорт 
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	Дата = ОписаниеДаты.ПривестиЗначение(Значение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	#Область ПодготовкаЧастейДаты
	
	КоличествоСимволов = СтрДлина(Значение);
	
	Если КоличествоСимволов > 25 Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	ЧастиЗначения = Новый Массив;
	ЧастьЗначения = "";
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл 
		
		Символ = Сред(Значение, НомерСимвола, 1);
		
		Если ЭтоЧисло(Символ) Тогда 
			
			ЧастьЗначения = ЧастьЗначения + Символ;
			
		Иначе
			
			Если Не ПустаяСтрока(ЧастьЗначения) Тогда 
				ЧастиЗначения.Добавить(ЧастьЗначения);
			КонецЕсли;
			
			ЧастьЗначения = "";
			
		КонецЕсли;
		
		Если НомерСимвола = КоличествоСимволов
			И Не ПустаяСтрока(ЧастьЗначения) Тогда 
			
			ЧастиЗначения.Добавить(ЧастьЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧастиЗначения.Количество() < 3 Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 4 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 5 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 6 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	#КонецОбласти
	
	// Если формат ггггММддЧЧммсс:
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[1] + ЧастиЗначения[0]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	// Если формат ггггддММЧЧммсс
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[0] + ЧастиЗначения[1]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	Возврат ПустаяДата;
	
КонецФункции

#КонецОбласти

#КонецОбласти